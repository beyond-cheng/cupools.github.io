<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一环的笔记</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cupools.github.io/"/>
  <updated>2016-10-15T07:43:09.000Z</updated>
  <id>http://cupools.github.io/</id>
  
  <author>
    <name>liyh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>代理与爬虫的尝试</title>
    <link href="http://cupools.github.io/2016/10150/"/>
    <id>http://cupools.github.io/2016/10150/</id>
    <published>2016-10-15T07:00:00.000Z</published>
    <updated>2016-10-15T07:43:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>国庆的时候发现了一个小游戏，积分可以通过分享好友并点击链接获得，判定挺简单的样子。于是为了买到新皮肤，开始动手尝试。</p>
<a id="more"></a>
<p><img src="/images/201610150/screenshoot.png" alt="screenshoot"></p>
<h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>首先断开 WiFi，通过移动网络再次访问链接，积分增加。恩第一步就成功了，看来是通过 IP 判断的。</p>
<p>然后尝试修改请求 Header 的 X-Forwarded-For 并向目标发起请求，发现积分并没有增加。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ curl http://xxx.me/ -H <span class="string">'X-Forwarded-For: 1.1.1.1'</span> -I</div><div class="line">HTTP/1.1 200 OK</div><div class="line">Server: Tengine</div><div class="line">Content-Type: text/html</div><div class="line">Content-Length: 7823</div><div class="line">Connection: keep-alive</div><div class="line">...</div></pre></td></tr></table></figure>
<p>那对方可能是通过 remoteAddress 获取 IP 的，谷歌 “免费代理 IP” 终于找到一个有用的，再次发起请求，发现积分增加了，好开心呀</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ curl -x 122.96.59.104:81 http://xxx.me -I</div><div class="line">HTTP/1.1 200 OK</div><div class="line">Server: Tengine</div><div class="line">Content-Type: text/html</div><div class="line">Content-Length: 7823</div><div class="line">Connection: keep-alive</div><div class="line">...</div></pre></td></tr></table></figure>
<p>就这样简单搞定啦。</p>
<p>然后简单提一下 X-Forwarded-For 和 remoteAddress。前者是一个 HTTP 扩展头部，请求从客户端到达目标服务器的过程中，中间经过的代理服务器（反向代理或者非高度匿名的正向代理）会把客户端的真实 IP 和代理 IP 记录在 X-Forwarded-For 中，类似 <code>X-Forwarded-For: client, proxy0, proxy1</code>，但由于头部可被自由修改所以不可信；后者无法伪造，否则无法在客户端和服务器之间建立连接。</p>
<p>而使用高度匿名的正向代理的话，代理服务器将我们的数据包原封不动的转发，在服务端看来就好像真的是一个普通客户端在访问，而记录的IP是代理服务器的IP。</p>
<p><img src="/images/201610150/proxy.png" alt="proxy"></p>
<p>然后每次手动寻找靠谱的代理 IP 然后发起请求效率太低啦，于是就继续看爬虫要怎么搞了。</p>
<h2 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h2><p>这里简单地爬取页面表格中的代理 IP，程序访问页面获得 HTML 文本然后过滤得到有效的信息，大概是这样的做法。每次爬取完成后直接使用而不入库，因为免费的 IP 质量太低啦而且我也不需要很大的量，类似的功能用 Node.js 配合 <a href="https://github.com/cheeriojs/cheerio" target="_blank" rel="external">cherrio</a> 就可以完成了（这个时候会想自己是个前端真是太好了）。</p>
<p>简单代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'request'</span></div><div class="line"><span class="keyword">import</span> cheerio <span class="keyword">from</span> <span class="string">'cheerio'</span></div><div class="line"><span class="comment">// request 配置</span></div><div class="line"><span class="keyword">let</span> option = &#123;</div><div class="line">  url: <span class="string">'http://free.ip'</span>,</div><div class="line">  timeout: <span class="number">5e3</span>,</div><div class="line">  headers: &#123;</div><div class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 处理回调</span></div><div class="line"><span class="keyword">let</span> callback = <span class="function"><span class="keyword">function</span> (<span class="params">process</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">err, response, body</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!error &amp;&amp; response.statusCode === <span class="number">200</span>) &#123;</div><div class="line">      process(body)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 收集 IP</span></div><div class="line"><span class="keyword">let</span> process = <span class="function"><span class="keyword">function</span> (<span class="params">body</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> $ = cheerio.load(body)</div><div class="line">  $(<span class="string">'#list .ip'</span>)</div><div class="line">    .map(</div><div class="line">      (index, el) =&gt; $(el).text()</div><div class="line">    )</div><div class="line">    .forEach(</div><div class="line">      ip =&gt; <span class="built_in">console</span>.log(ip)</div><div class="line">    )</div><div class="line">&#125;</div><div class="line"><span class="comment">// 发起请求</span></div><div class="line">request(option, callback(process))</div></pre></td></tr></table></figure>
<p>然后这里模拟 UA 是因为如果 UA 不合理部分网站会直接拒绝请求。</p>
<p>类似的功能也封装成了 <a href="https://github.com/cupools/faker" target="_blank" rel="external">Faker</a>，可以很方便地爬取数据和扩展。示例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> faker <span class="keyword">from</span> <span class="string">'faker'</span></div><div class="line"></div><div class="line">faker</div><div class="line">  .extend(<span class="built_in">require</span>(<span class="string">'faker/extend/xicidaili'</span>))</div><div class="line">  .run()</div><div class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">hosts</span>) </span>&#123;</div><div class="line">    <span class="comment">// hosts =&gt; ['http://100.10.10.10:80', ...]</span></div><div class="line">    <span class="comment">// do something</span></div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
<p>大概内容就这些，皮肤也买到啦，玩的开心~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;国庆的时候发现了一个小游戏，积分可以通过分享好友并点击链接获得，判定挺简单的样子。于是为了买到新皮肤，开始动手尝试。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://cupools.github.io/tags/JavaScript/"/>
    
      <category term="学习" scheme="http://cupools.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>基于 Tesseract 和 GM 识别验证码</title>
    <link href="http://cupools.github.io/2016/10130/"/>
    <id>http://cupools.github.io/2016/10130/</id>
    <published>2016-10-13T07:00:00.000Z</published>
    <updated>2016-10-15T05:57:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前爬代理 IP 的时候发现一些网站把端口号用验证码的形式显示，于是花了一个下午的时间瞄了一些识别验证码的东西，并用 Node.js 包装了一下，暂时叫 <a href="https://github.com/cupools/verify" target="_blank" rel="external">verify</a> 好了</p>
<a id="more"></a>
<h2 id="依赖环境"><a href="#依赖环境" class="headerlink" title="依赖环境"></a>依赖环境</h2><p>这里主要用到两个工具，分别是 <a href="https://github.com/tesseract-ocr/tesseract" target="_blank" rel="external">Tesseract</a> 和 <a href="http://www.graphicsmagick.org/" target="_blank" rel="external">GraphicsMagick</a>。前者是开源的 OCR (Optical Character Recognition, 光学字符识别) 工具，目前由谷歌维护；后者是是图像处理的瑞士军刀。macOS 下推荐使用 <a href="http://brew.sh/index_zh-cn.html" target="_blank" rel="external">Homebrew</a> 安装，这样会省去很多安装依赖库之类的麻烦。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">ruby <span class="_">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div></pre></td></tr></table></figure>
<p>通过 Homebrew 安装 GM 和 Tesseract，安装 GM 出现问题可以参考 <a href="https://cupools.github.io/2015/092914/">这里</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ brew install graphicsmagick</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ brew install --with-training-tools tesseract</div></pre></td></tr></table></figure>
<p>Tesseract 中参数 <code>--with-training-tools</code> 表示同时安装训练识别库的工具，不需要可以忽略；默认安装会带有英文字符的识别库，文件夹路径为 <code>/usr/local/share/tessdata</code>，也可以添加参数 <code>--all-languages</code> 下载官方提供的各个语言的识别库，不过体积较大推荐<a href="https://github.com/tesseract-ocr/tessdata" target="_blank" rel="external">手动下载</a>。如果需要手动指定识别库的路径可以添加环境变量然后重启终端。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># ~/.bash_profile</span></div><div class="line"><span class="built_in">export</span> TESSDATA_PREFIX=/usr/<span class="built_in">local</span>/share/</div></pre></td></tr></table></figure>
<p>除了依赖环境，Node.js 还需要安装前面两个工具对应 Node.js 的封装模块 <a href="https://github.com/desmondmorris/node-tesseract" target="_blank" rel="external">node-tesseract</a> 和 <a href="https://github.com/aheckmann/gm" target="_blank" rel="external">gm</a>。</p>
<h2 id="识别验证码"><a href="#识别验证码" class="headerlink" title="识别验证码"></a>识别验证码</h2><p>一般情况下，为了防止验证码简单地被识别，一般会在验证码背景加上干扰的线条或噪点。类似的做法会使得 tesseract-ocr 的识别成功率极大地降低。因此在识别图像之前，需要通过 GM 对图片进行处理以降低干扰。</p>
<p>简单粗暴的处理方法是调整图片的阈值。在 PhotoShop 里面，“阈值”命令将灰色或彩色图像转换为高对比度的黑白图像。可以指定某个色阶作为阈值。所有比阈值亮的像素转换为白色；而所有比阈值暗的像素转换为黑色。</p>
<p>以下图为例，是将验证码的阈值调整为 55(22%) 的结果，也可以手动在 PhotoShop 尝试调整阈值并预览。</p>
<p><img src="/images/201610130/threshold.png" alt="pic/threshold"></p>
<p>基于 GM 处理阈值的实现如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> gm = <span class="built_in">require</span>(<span class="string">'gm'</span>)</div><div class="line"><span class="keyword">var</span> src = <span class="string">'./code.jpg'</span></div><div class="line"><span class="keyword">var</span> output = <span class="string">'./code.gm.jpg'</span></div><div class="line"></div><div class="line">gm(src)</div><div class="line">  .threshold(<span class="number">22</span>, <span class="string">'%'</span>)</div><div class="line">  .write(output, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(err || <span class="string">'success'</span>)</div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
<p>得到优化过的图片之后，就可以将输出的图片路径交给 Tesseract 进行识别了，代码也比较简单：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> tesseract = <span class="built_in">require</span>(<span class="string">'node-tesseract'</span>)</div><div class="line"><span class="keyword">var</span> filepath = <span class="string">'./code.gm.jpg'</span></div><div class="line"><span class="keyword">var</span> option = &#123;</div><div class="line">  psm: <span class="number">7</span>    </div><div class="line">&#125;</div><div class="line"></div><div class="line">tesseract</div><div class="line">  .process(filepath, option, <span class="function"><span class="keyword">function</span> (<span class="params">err, txt</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(err || txt)</div><div class="line">    <span class="comment">// txt =&gt; fjtr</span></div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
<p>到这里已经完成了识别验证码的所有工作了~</p>
<p><img src="/images/201610130/sample.png" alt="pic/sample"></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>实际上，处理验证码的过程不会这么顺利。有下面几个问题：</p>
<ol>
<li>GM 调整阈值如果直接使用数值会导致输出的图片空白</li>
<li>图片的透明通道会被 GM 干掉变成黑色</li>
<li>由于 Tesseract 中 <code>Leptonica</code> 模块在 OSX 上存在问题导致无法识别 .gif 图片</li>
<li>Tesseract 默认配置下的识别准确度不足，经常遇到识别错误的情况</li>
</ol>
<p>第 1 个问题通过阈值的百分比绕过，第 2 个问题通过 GM 的 <code>-flattern</code> 解决，第 3 个问题只要把提供识别的图片转换为 .jpg 格式就行了。修改后：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">gm(src)</div><div class="line">  .flattern()</div><div class="line">  .threshold(<span class="number">22</span>, <span class="string">'%'</span>)</div><div class="line">  .write(<span class="string">'output.jpg'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(err || <span class="string">'success'</span>)</div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
<p>第 4 个问题可以通过训练样本提高识别准确度，有点繁琐但也好上手，具体可参考：</p>
<ul>
<li><a href="https://github.com/tesseract-ocr/tesseract/wiki/TrainingTesseract" target="_blank" rel="external">官方文档</a></li>
<li><a href="http://www.zmonster.me/2015/05/05/tesseract-training.html" target="_blank" rel="external">Tesseract:训练</a></li>
<li><a href="http://blog.csdn.net/robitmind/article/details/14223539" target="_blank" rel="external">Tesseract-OCR 字符识别—样本训练</a></li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>GM 的<a href="http://aheckmann.github.io/gm/" target="_blank" rel="external">官方文档</a>已经比较完善了，然后在 node-tesseract 使用过程中发现接触到的可配置参数主要有这几个：</p>
<ul>
<li><code>l</code>: 指定训练生成的语言包，默认为 <code>eng</code></li>
<li><code>psm</code>: 识别模式，常用的为 <code>psm: 7</code>，即单行文本</li>
<li><code>config</code>: 可配置项，比如 <code>config: [&#39;digits&#39;]</code> 会指定为只识别数字</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前爬代理 IP 的时候发现一些网站把端口号用验证码的形式显示，于是花了一个下午的时间瞄了一些识别验证码的东西，并用 Node.js 包装了一下，暂时叫 &lt;a href=&quot;https://github.com/cupools/verify&quot;&gt;verify&lt;/a&gt; 好了&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://cupools.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue 的其他实践</title>
    <link href="http://cupools.github.io/2016/09120/"/>
    <id>http://cupools.github.io/2016/09120/</id>
    <published>2016-09-11T16:00:00.000Z</published>
    <updated>2016-09-13T01:35:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前基于 Vue 的项目花了十个工作日不到的时间搞定了二期迭代，又发现了一些实用的东西，于是简单记录一下。</p>
<a id="more"></a>
<h2 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h2><blockquote>
<p>Mixins are a flexible way to distribute reusable functionalities for Vue components. A mixin object can contain any component options. When a component uses a mixin, all options in the mixin will be “mixed” into the component’s own options.</p>
</blockquote>
<p>如文档介绍，混合以一种灵活的方式为组件提供分布复用功能（即将功能从组件中分离，并允许多个组件复用）。这里倾向于逻辑而非模板的复用，同时也区别于插件，更多地与业务相关。</p>
<p>混合的使用很简单，但在使用过程中也需要注意一些地方。一开始自己的使用如下示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// define a mixin object</span></div><div class="line"><span class="keyword">var</span> myMixin = &#123;</div><div class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.hello()</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    hello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// define a component that uses this mixin</span></div><div class="line"><span class="keyword">var</span> Component = Vue.extend(&#123;</div><div class="line">  mixins: [myMixin],</div><div class="line">  data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      foo: <span class="string">'bad code'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"><span class="keyword">var</span> component = <span class="keyword">new</span> Component() <span class="comment">// -&gt; "bad code"</span></div></pre></td></tr></table></figure>
<p>可以看到混合选项中的方法调用了组件的 data。尽管代码正常运行，但这种做法造成代码的可维护性和可读性比较糟糕。一方面，使用混合的组件必须声明 <code>foo</code>，增加了维护的成本；另一方面对于混合选项来说，<code>foo</code> 这个属性是未知的，可读性很差。我自己的解决方法则是对于组件不关心的属性直接在混合选项中声明，组件关心的属性则组件和混合选项同时声明，由组件的值覆盖后者。</p>
<h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><p>这里以 Modal 为例巴拉下自己做法转变的过程。超简化的 Modal 如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Modal.vue</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    data() &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            visible: <span class="literal">false</span>,</div><div class="line">            msg: <span class="string">''</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    methods: &#123;</div><div class="line">        show() &#123;&#125;,</div><div class="line">        hide() &#123;&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="组件传递"><a href="#组件传递" class="headerlink" title="组件传递"></a>组件传递</h3><p>每个页面都拥有自己的子组件 Modal 这种事情我不干，高度可定制的内容通过 <code>partial</code> 解决。Modal 组件放在根组件下，通过 <code>prop</code> 直接传给子组件调用。大概这样子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 根组件模板 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">:modal</span>=<span class="string">"$refs.modal"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Modal</span> <span class="attr">v-ref:modal</span>&gt;</span><span class="tag">&lt;/<span class="name">Modal</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 子组件调用 Modal</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    props: &#123;</div><div class="line">        modal: [<span class="string">'modal'</span>]</div><div class="line">    &#125;,</div><div class="line">    attached() &#123;</div><div class="line">        <span class="keyword">this</span>.modal.show(<span class="string">'hello'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种做法当组件层级复杂的话，需要把 Modal 一层一层传下去。尽管组件的层级关系清晰，但这是比较繁琐的事情。</p>
<h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><p>既然不把组件从上往下传，那就可以考虑从下往上把事件抛出来。Vue 的每个实例提供了自定义事件接口，能够抛出事件并被其他组件捕获。于是基于自定义事件调起 Modal 的做法可以如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 根组件模板 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Modal</span> <span class="attr">v-ref:modal</span>&gt;</span><span class="tag">&lt;/<span class="name">Modal</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 根组件监听事件</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    events: &#123;</div><div class="line">        <span class="string">'modal_show'</span>(...args) &#123;</div><div class="line">            <span class="keyword">this</span>.$refs.modal.show(...args)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 子组件调用 Modal</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    attached() &#123;</div><div class="line">        <span class="keyword">this</span>.$dispatch(<span class="string">'modal_show'</span>, <span class="string">'hello'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>自定义事件使得组件之间很方便进行通信，但是滥用自定义事件的话会造成组件松散，导致难以维护。</p>
<h3 id="基于-Vuex"><a href="#基于-Vuex" class="headerlink" title="基于 Vuex"></a>基于 Vuex</h3><p>把 Modal 的状态放进 <code>store</code> 之后，可以通过 <code>action</code> 很直观地调用 Modal。示例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// store.js</span></div><div class="line"><span class="keyword">const</span> state = &#123;</div><div class="line">    modal: &#123;</div><div class="line">        visible: <span class="literal">false</span>,</div><div class="line">        msg: <span class="string">''</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Modal.vue</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    vuex: &#123;</div><div class="line">        getters: &#123;</div><div class="line">            visible: state =&gt; state.modal.visible,</div><div class="line">            msg: state =&gt; state.modal.msg</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    methods: &#123;</div><div class="line">        show() &#123;&#125;,</div><div class="line">        hide() &#123;&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 子组件调用 Modal</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    vuex: &#123;</div><div class="line">        actions: &#123;</div><div class="line">            showModal</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    attached: &#123;</div><div class="line">        <span class="keyword">this</span>.showModal(<span class="string">'hello'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Modal 可以看作整个应用的一个公共状态（等待用户操作），因此把它放进 <code>store</code> 是合理的，然后就是 Vuex 的套路了。</p>
<p>以上三种做法都可以达到目的，当然也有其他做法，看个人想法咯。</p>
<h2 id="服务端同步数据"><a href="#服务端同步数据" class="headerlink" title="服务端同步数据"></a>服务端同步数据</h2><p>之前的做法是在 <code>plugin</code> 中捕获 <code>action</code> 之后发起请求，现在想想这种做法太绕啦，直接在 <code>action</code> 中发起请求更加简洁，然后再 <code>dispatch</code> 服务端响应的数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// actions.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchUser = <span class="function"><span class="keyword">function</span>(<span class="params">&#123;dispatch&#125;</span>) </span>&#123;</div><div class="line">    Vue</div><div class="line">        .http()</div><div class="line">        .post(<span class="string">'url'</span>)</div><div class="line">        .then(res =&gt; &#123;</div><div class="line">            <span class="keyword">let</span> ret = res.json()</div><div class="line">            dispatch(ActionTypes.USER_UPDATE, ret.data)</div><div class="line">        &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然，上面的做法相当于把服务端同步下来的数据直接放进 store 里面了。如果是组件私有的数据，则可以通过 <code>Mixins</code> 抽象同步数据的方法。上面也提到了，通过混合可以灵活地复用功能。以列表为例，同步服务端可以这样子处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// mixin-list.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    data: &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            _store: [],</div><div class="line">            _params: &#123;&#125;,</div><div class="line">            _link: <span class="string">''</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    methods() &#123;</div><div class="line">        fetchList() &#123;</div><div class="line">            <span class="keyword">let</span> &#123;_store, _link, _params&#125; = <span class="keyword">this</span>.$data</div><div class="line">            </div><div class="line">            <span class="keyword">this</span></div><div class="line">                .$http()</div><div class="line">                .post(_link, _params)</div><div class="line">                .then(res =&gt; &#123;</div><div class="line">                    <span class="keyword">let</span> ret = res.json()</div><div class="line">                    _store.push(ret.data)</div><div class="line">                &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 组件</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    mixins: [mixinList],</div><div class="line">    data() &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            _store: [],</div><div class="line">            _params: &#123;</div><div class="line">                auth: <span class="literal">true</span></div><div class="line">            &#125;,</div><div class="line">            _link: <span class="string">'url'</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    computed: &#123;</div><div class="line">        list() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._store.filter(item =&gt; item.valid)</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    attached() &#123;</div><div class="line">        <span class="keyword">this</span>.fetchList()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前基于 Vue 的项目花了十个工作日不到的时间搞定了二期迭代，又发现了一些实用的东西，于是简单记录一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://cupools.github.io/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://cupools.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>围绕 Vue.js 展开项目</title>
    <link href="http://cupools.github.io/2016/08260/"/>
    <id>http://cupools.github.io/2016/08260/</id>
    <published>2016-08-26T09:38:00.000Z</published>
    <updated>2016-08-26T09:38:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>Vue 在今年有一种大杀特杀的感觉，有机会尝试了一下，然后记录一下使用过程的一些想法</p>
<a id="more"></a>
<h2 id="为什么是-Vue"><a href="#为什么是-Vue" class="headerlink" title="为什么是 Vue"></a>为什么是 Vue</h2><p>首先业务场景大概是这样：前后端分离的开发模式，移动端，15 个页面重构，需要与服务端同步数据和状态，需要用户身份验证，需要跑一个 Node 应用托管静态资源和提供日志接口，需要全站屏蔽 SEO，需要打通 CI 和发布平台。</p>
<p>需求评审完开始定前端的技术栈。首先很开心地抛弃已有的基于 FIS3 的整套构建链路，原因如下：</p>
<ol>
<li>以往项目以营销类为主，生命周期短，已有的实践不适用于这种小型立项（考虑组件的管理，开发人员交接）</li>
<li>FIS3 在 Vue 和 React 上的开发体验不够友好，可能耗费过多时间去解决构建工具的兼容问题</li>
<li><s>对 webpack 好感度上升</s></li>
</ol>
<p>然后是 Vue.js 1.0.26 和 React 15.1.0 的取舍。考虑如下：</p>
<ol>
<li>移动端场景，Vue 更加轻量、灵活（双向绑定，指令，插件）</li>
<li>Vue 的官方最佳实践足够成熟</li>
<li>vue-loader 以类似 Web Component 的形式组织代码，组件的资源容易管理，方便后续维护迭代</li>
<li>工作交接，Vue 更容易让人接受</li>
<li><s>已经试过了 React 想再试试 Vue</s></li>
</ol>
<h2 id="主要技术栈"><a href="#主要技术栈" class="headerlink" title="主要技术栈"></a>主要技术栈</h2><p>主角是 Vue 全家桶</p>
<ul>
<li>vue.js</li>
<li>vuex</li>
<li>vue-router</li>
<li>vue-resource</li>
</ul>
<p>构建工具</p>
<ul>
<li>webpack</li>
<li>Babel</li>
<li>vue-loader</li>
<li>px2rem-loader</li>
</ul>
<p>服务端</p>
<ul>
<li>Koa</li>
</ul>
<p>测试框架</p>
<ul>
<li>Co Mocha &amp; Chai</li>
<li>Karma</li>
</ul>
<p>其他</p>
<ul>
<li>ESLint</li>
<li>Bower</li>
</ul>
<h2 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h2><h3 id="目录规范"><a href="#目录规范" class="headerlink" title="目录规范"></a>目录规范</h3><p>基于 vue-cli 初始化 webpack 项目，已经能满足大部分需要了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ vue init webpack demo</div></pre></td></tr></table></figure>
<p>然后根据需要做一些调整。最终的目录结构如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">+ bower_components</div><div class="line">+ build</div><div class="line">+ ci</div><div class="line">+ config</div><div class="line">+ docs</div><div class="line">+ node_modules</div><div class="line">+ server</div><div class="line">+ src</div><div class="line">+ test</div><div class="line">- bower.json</div><div class="line">- index.ejs</div><div class="line">- package.json</div><div class="line">- README.json</div></pre></td></tr></table></figure>
<p>差不多是这样的角色：</p>
<ul>
<li><code>bower_components</code>: 没有放到 <code>src</code> 里面，通过 webpack 配置 <code>resolve</code> 允许直接引用第三方模块</li>
<li><code>build</code>: 构建的配置，同时包括 <code>mock.js</code>，一个 Express 中间件，用以在开发过程中模拟服务端数据接口，基于 Mockjs</li>
<li><code>ci</code>: CI 的配置</li>
<li><code>config</code>: 服务端的配置</li>
<li><code>server</code>: Koa 应用，仅用于生产环境中托管静态资源和提供日志接口</li>
<li><code>index.ejs</code>: 应用的入口页面，使用 Ejs 是考虑到页面自适应的代码希望内联到页面顶部，但 html-loader 在这方面的支持不够友好，于是通过 Ejs 注入文件引用和内联代码，最终构建输出 index.html </li>
</ul>
<p>展开 <code>src</code>, 目录结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">- src</div><div class="line">    - assets</div><div class="line">        + css</div><div class="line">        + images</div><div class="line">        - vue-auth.js</div><div class="line">        - vue-logger.js</div><div class="line">        ...</div><div class="line">    - components</div><div class="line">        + Modal</div><div class="line">        - List.vue</div><div class="line">        ...</div><div class="line">    - constants</div><div class="line">        - ActionTypes.js</div><div class="line">        - API.js</div><div class="line">        ...</div><div class="line">    - containers</div><div class="line">        - Home.vue</div><div class="line">        - Register</div><div class="line">            + images</div><div class="line">            - package.json</div><div class="line">            - Protocol.vue</div><div class="line">            - Register.vue</div><div class="line">        ...</div><div class="line">    - router</div><div class="line">        - router.js</div><div class="line">    - vuex</div><div class="line">        - actions.js</div><div class="line">        - getters.js</div><div class="line">        - mutations.js</div><div class="line">        - plugins.js</div><div class="line">        - store.js</div><div class="line">    - App.vue</div><div class="line">    - main.js</div></pre></td></tr></table></figure>
<p>也记录下 <code>src</code> 目录结构的设计意图</p>
<ul>
<li><code>assets</code>: 多个页面通用的样式 mixin 和图片 icon, 还包括根据业务需要写的一些 Vue 插件和指令</li>
<li><code>components</code>: 通用的 Vue 组件，如 Modal 和 List，部分可视为纯组件 (pure component)</li>
<li><code>constants</code>: 各种常量，包括 ActionTypes 和服务端接口等</li>
<li><code>containers</code>: 每个页面是一个 Vue 组件，同时也被视为一个容器，包括相关的业务组件和静态资源。初衷是每个页面的资源能够集中管理，方便维护</li>
<li><code>router</code>: vue-router 的配置</li>
<li><code>vuex</code>: vuex 的配置</li>
<li><code>App.vue</code>: 应用的根容器</li>
<li><code>main.js</code>: 入口文件，引用并初始化根容器和路由，并注入 Vue 插件和指令</li>
</ul>
<p>其他打包和测试的配置大部分还是按照 vue-cli 提供的方案，很厉害的 vue-cli</p>
<h3 id="组件管理"><a href="#组件管理" class="headerlink" title="组件管理"></a>组件管理</h3><p>首先，自己把组件区分了四个类型：根组件、容器组件、业务组件、通用组件。</p>
<ul>
<li>根组件：应用只有一个根组件，vue-router 通过根组件创建路由实例，直接挂载在 DOM 上面，并接管了 store</li>
<li>容器组件：相当于页面，生命周期由路由管理</li>
<li>业务组件：与业务较多耦合，可复用性差，作为容器组件的子组件</li>
<li>通用组件：与业务耦合小，可复用性强，状态和数据由父组件传入</li>
</ul>
<p>组件以 vue-loader 推荐的形式开发，逻辑、样式、模板都体现在 <code>.vue</code> 中，一个 <code>.vue</code> 文件既是一个完整的组件。比较复杂的组件通过文件夹的形式组织资源，包括图片、业务组件等，并通过 <code>package.json</code> 配置指定组件 <code>.vue</code> 的引用</p>
<p>这样做的好处如下：</p>
<ol>
<li>组件资源聚合，更容易管理和维护，考虑到长期迭代和工作交接应该是必要的</li>
<li>引用组件时不需要关心资源依赖的问题</li>
<li>区分业务组件和通用组件有利于更好把握组件的粒度和方法的抽象程度</li>
</ol>
<p><img src="/images/vue-loader.png" alt="vue-loader"></p>
<h3 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h3><p>数据和状态通过 vuex 管理，大体的使用与官方介绍的实践相似。与 Redux 做比较的话，感觉有这样的异同点</p>
<ol>
<li>两者都限制了数据单向流动，只允许抛出 action 触发状态变更</li>
<li>vuex 中组件接触 state 的方式却更加简单，相比 Redux 少了层级传递的限制</li>
<li>vuex 中 action 被直接分发到对应命名的 mutation，而避免了 reducer 中 <code>switch</code> 的结构。好处是更加简单和对 action 更少的约束，坏处是状态变更方法的组织变得松散，更少的约束使得 action 的结构不好把控</li>
</ol>
<p>vuex 在使用上明显更加轻便和简单，很有 Vue.js 的风格</p>
<p>然后提一下与服务端同步数据的方式。这次的尝试中，对于应用层面的状态，直接由组件 dispatch 一个 fetch 的 action，之后被 plugins 拦截，再由 plugins 发起请求，请求完成后 dispatch 一个 update 的 action 通过 mutation 更新 state，最终触发视图的更新。虽然不好说这是一种最佳实践，但有利于将与服务端交互的逻辑从组件中剥离开并统一管理，组件只关心 state。简单代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// component.vue</span></div><div class="line"><span class="keyword">import</span> &#123; fetchUser &#125; <span class="keyword">from</span> <span class="string">'src/vuex/actions'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    vuex: &#123;</div><div class="line">        getters: &#123;</div><div class="line">            user: state =&gt; state.user</div><div class="line">        &#125;,</div><div class="line">        actions: &#123;</div><div class="line">            fetchUser</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    created() &#123;</div><div class="line">        <span class="keyword">this</span>.fetchUser()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// plugin.js</span></div><div class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></div><div class="line"><span class="keyword">const</span> plugin = store =&gt; &#123;</div><div class="line">    store.subscribe((&#123;type, payload&#125;) =&gt; &#123;</div><div class="line">        <span class="keyword">switch</span> (type) &#123;</div><div class="line">            <span class="keyword">case</span> ActionTypes.USER_FETCH:</div><div class="line">                fetchUserInfo()</div><div class="line">                <span class="keyword">break</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchUserInfo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    Vue.http.get(<span class="string">'url'</span>).then(ret =&gt; &#123;</div><div class="line">        store.dispatch(ActionTypes.USER_UPDATE, ret)</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其他要做的就是区分好组件本地状态和应用层级状态就行啦。</p>
<h3 id="插件-amp-指令"><a href="#插件-amp-指令" class="headerlink" title="插件 &amp; 指令"></a>插件 &amp; 指令</h3><p>Vue 的插件和指令学习成本很低，但根据项目需要编写合适的插件或指令能够发挥很大的作用。前者能够很好地封装工具函数和方法，后者能够快速创建轻量实用的组件。简单示例如下</p>
<p>插件：统计日志</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// vue-logger.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> logger = &#123;</div><div class="line">        logClick() &#123;&#125;,</div><div class="line">        logVisit() &#123;&#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    Vue.prototype.$logger = Vue.logger = logger</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// component.vue</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    methods: &#123;</div><div class="line">        share() &#123;</div><div class="line">            <span class="keyword">this</span>.$logger.logClick(<span class="string">'share'</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>指令：获取手机验证码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// vue-code.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>) </span>&#123;</div><div class="line">    Vue.directive(<span class="string">'code'</span>) &#123;</div><div class="line">        params: [<span class="string">'mobile'</span>],</div><div class="line">        data: &#123;</div><div class="line">            ticking: <span class="number">60</span></div><div class="line">        &#125;,</div><div class="line">        bind() &#123;</div><div class="line">            <span class="keyword">this</span>.el.addEventListener(<span class="string">'click'</span>, <span class="keyword">this</span>.getCode.bind(<span class="keyword">this</span>), <span class="literal">false</span>)</div><div class="line">        &#125;,</div><div class="line">        unbind() &#123;</div><div class="line">            <span class="comment">// unbind event</span></div><div class="line">        &#125;,</div><div class="line">        getCode() &#123;</div><div class="line">            <span class="keyword">let</span> &#123;mobile&#125; = <span class="keyword">this</span>.params</div><div class="line">            Vue.http.get(<span class="string">`url?m=<span class="subst">$&#123;mobile&#125;</span>`</span>)</div><div class="line">            <span class="comment">// count down tips...</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- component.vue --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"tel"</span> <span class="attr">name</span>=<span class="string">"mobile"</span> <span class="attr">v-model</span>=<span class="string">"mobile"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-code</span> <span class="attr">:mobile</span>=<span class="string">"mobile"</span>&gt;</span>获取验证码<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    data() &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            mobile: <span class="string">''</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>前端测试基于 Karma 展开，主要关注逻辑方面而不是 UI。这次测试基于整个应用进行，而不是独立挂载单个组件，存在不足的地方。<code>spec</code> 按照组件的粒度组织，并对关键业务相关的组件进行 100% 测试覆盖，最终的质量也比较理想。</p>
<p>然后由于存在比较多的异步操作，使用 Co Mocha 以支持 ES6 generator。</p>
<p>在组织测试用例的过程中，需要模拟服务端返回不同状态码以确保被正确处理。这里提供模拟数据的依然是本地的开发服务器，但是响应数据在测试用例中声明。基于 vue-resource 的 interceptor 的特性，拦截应用中发起的请求并响应测试数据。封装之后的使用方法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; interceptor, wait &#125; <span class="keyword">from</span> <span class="string">'./utils'</span></div><div class="line">describe(<span class="string">'page Profile'</span>, <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</div><div class="line">    beforeEach(<span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</div><div class="line">        interceptor.reset()</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    it(<span class="string">'bad auth forbidden'</span>, <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</div><div class="line">        interceptor.mock(<span class="string">'/user/detail'</span>, &#123;</div><div class="line">            code: <span class="number">502</span>,</div><div class="line">            message: <span class="string">'非法访问拦截'</span></div><div class="line">        &#125;)</div><div class="line">        App.$el.querySelector(<span class="string">'#button'</span>).click()</div><div class="line">        <span class="keyword">yield</span> wait(<span class="number">500</span>)</div><div class="line">        expect(App.$el.querySelector(<span class="string">'.modal-body'</span>).textContent).to.contain(<span class="string">'非法访问拦截'</span>)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="打包上线"><a href="#打包上线" class="headerlink" title="打包上线"></a>打包上线</h3><p>这次采取的打包方案是推送分支触发 Git hook 然后推送到 Jenkins 进行线上打包，再直接推送到发布平台。之后迭代会考虑抛弃 Jenkins 通过 Gitlab-ci-runner 实现。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>其他一些零碎的东西</p>
<ul>
<li><code>slot</code> 使得组件的复用灵活很多很多</li>
<li>html-minify 对尖括号 <code>&lt;</code> 敏感，如果 template 中表达式使用了尖括号会造成打包压缩 html 的时候抛出异常，需要避免</li>
<li>Karma 使用的服务端中间件是 Connect 而不是 Express</li>
<li>Karma 手动配置自定义的 <code>plugins</code> 时需要指定其他所有的插件，或者配置 <code>karma-*</code> 可自动引用其他插件</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>第一次尝试 Vue 还是挺舒服的，印象最深刻的居然是 <code>vue-cli</code>；Vue.js 本身十分出色，从 MVVM 框架发展到现在有能力提供一整套前端应用解决方案，<strong>“简单”</strong>也是框架本身强大的地方；官方全家桶的搭配使用比 React 舒服，踩的坑也比之前自己摸索 React 少很多很多，两者有很多共通的地方，更适合新手尝试；vue-loader 应该是一个亮点，自己感觉类似的组织方法优势在于资源聚合，然后会觉得 JSX 好看一点。</p>
<p>期待 Vue 2.0 和全家桶的升级</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue 在今年有一种大杀特杀的感觉，有机会尝试了一下，然后记录一下使用过程的一些想法&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://cupools.github.io/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://cupools.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>近两个月的一点总结</title>
    <link href="http://cupools.github.io/2016/08140/"/>
    <id>http://cupools.github.io/2016/08140/</id>
    <published>2016-08-14T14:46:00.000Z</published>
    <updated>2016-08-26T09:30:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>六月份到现在利用空闲的时间尝试了挺多之前没有接触过的东西，总的来说挺充实的感觉。趁着加班一个月的项目刚上线， Lia 也在今天迭代了 v2.0.0，抽空理一下这段时间的流水账。</p>
<a id="more"></a>
<h2 id="React-amp-webpack"><a href="#React-amp-webpack" class="headerlink" title="React &amp; webpack"></a>React &amp; webpack</h2><p>可能在之前接触了很多 React 的布道，真正写 JSX 的时候并没有抵触，相反 React 里面各个部分的设计都让我敬佩，感觉大部分都是自然合理地出现而没有刻意。同时尽管之前粗糙地尝试过 Reflux，在接触 Redux 之后又耗费了大概两天的时间去理解其中数据流的意图。其他 react-router 之类的模块就比较好掌握了。关于 React 的尝试并没有深入，不敢多说了。</p>
<p>webpack 的话之前已经接触过，但还是通过这次的机会沉迷进去。作为一个模块打包工具，webpack 能做的东西绝对不只是打包，同时还为模块的独立和组件资源的聚合提供了构建工具层面的支持。同时 webpack 的使用也可以很简单，在接触了 vue-cli 之后也才意识到 webpack 的配置可以更加灵活。</p>
<p>学习 React 练手的过程中也挑了 Ant Design 去尝试，也挺好咯</p>
<h2 id="Sublime-Text-amp-Atom"><a href="#Sublime-Text-amp-Atom" class="headerlink" title="Sublime Text &amp; Atom"></a>Sublime Text &amp; Atom</h2><p>这期间为了舒服地写 React，从用了四年的 ST 切到了 Atom，然后大概过了一个月的时间又回到 ST。</p>
<p>一开始用 Atom 各方面都很优秀。默认主题 One Dark 很好看，语法高亮、代码校验和格式化、Terminal 等等插件也十分强大，偶尔遇到插件的问题也可以自己 Debug 找原因。同时 Atom 在 1.8 版本应该也比较完善了，使用过程中没有遇到一些致命的坑。</p>
<p>然而 Atom 在速度方面还是远远跟不上 ST。在 OS X 日常使用中可以感觉到 Atom 偶尔卡顿，检索和打开文件也稍微延时了一点点点，打开大文件马上奔溃。于是捣鼓了两天时间在 ST 上也配了 Material Theme 及一系列插件, 又回到使用 ST 的日子了。</p>
<h2 id="ESLint-amp-JSHint"><a href="#ESLint-amp-JSHint" class="headerlink" title="ESLint &amp; JSHint"></a>ESLint &amp; JSHint</h2><p>也是 JSX 的缘故，从 JSHint 切到了 ESLint，自己花时间熟悉和捣鼓规则。两者对比的话，前者简单，后者灵活。同时，ESLint 也能更好地兼容 ES6 及之后的新语法，但由于各种规则都放开给自己捣鼓了，在刚接触的时候面对这么多的可配置项还是有点发呆。</p>
<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>上手了 React 之后，刚好有个小需求提到我这边。考虑到开发体验、组件的资源聚合及代码的可维护，果断抛弃了目前团队基于 FIS3 的构建流程，自己基于 webpack 另起炉灶。然后这次又选择了更加轻量和简单的 Vue 去尝试。</p>
<p>去年 Vue.js 0.12 的时候以 MVVM 框架的形式去尝试过，也遇到了一些坑，但是对 Vue 及其作者的印象都很好。这次围绕 Vue.js 1.0.26 展开项目，感觉与 React 也有很多相似的地方。Vue.js 延续了“简单”的风格，但却足够强大与 React 一拼，类似 Web Component 的代码组织风格使得组件的编写更加直观，指令和插件使得工具函数的封装和使用更加友好；vue-cli 对我来说表现十分惊艳；vuex 与 Redux 有很多概念相似，使用上却很多不同；vue-router 中规中矩，还有一些可以优化的地方；vue-resource 也是一个十分出色的模块，在编写测试用例的过程中帮了大忙。</p>
<p>期待 Vue.js 2.0</p>
<h2 id="Karma"><a href="#Karma" class="headerlink" title="Karma"></a>Karma</h2><p>也是通过 vue-cli 的尝试下才接触了 Karma 这个方向，一下子打开了眼界。以往对于浏览器测试的认识停留在 Phantomjs 上，虽然很强大，但感觉还是挺不友好的。在看到了 Karma 之后马上决定用手上的项目试水，也是得益于项目基于 Vuejs 的组件化开发，在编写用例的时候没有很多纠结。vue-resource 的 <code>interceptor</code> 则为模拟服务器的不同响应提供了十分方便的测试途径。这次项目中几个主要功能模块的测试覆盖率在强迫症的推动下做到了 100%，项目提测到上线前端部分没出现功能性的 bug，撒花撒花</p>
<h2 id="Travis-CI-amp-Coveralls"><a href="#Travis-CI-amp-Coveralls" class="headerlink" title="Travis CI &amp; Coveralls"></a>Travis CI &amp; Coveralls</h2><p>赶项目期间 Emilia 出现了一个 issue 才发现在 Windows 下面存在致命的问题导致模块不可用，这才真正对 <code>test</code> 这个文件夹怀有敬意，也才开始接触 CI 和 Coveralls。两个平台上手门槛不高，但是如何合理地设计和编写用例感觉还是要花一些时间和精力。</p>
<p>然后有好几次开虚拟机在 Windows 下面跑用例让人抓狂。</p>
<h2 id="Mocha-amp-Chai"><a href="#Mocha-amp-Chai" class="headerlink" title="Mocha &amp; Chai"></a>Mocha &amp; Chai</h2><p>抹茶是自己比较早开始接触的测试框架，使用起来感觉很融洽，然后 Chai 却是前几天 Lia 调整用例的时候才用上的，有点错过了很久的感觉。可扩展的插件和自定义的断言使得测试用例的更加直观和友好，写起来很满意。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这段时间也放弃了书写分号，JS 也是 CSS 也是，解放了生产力；Lia 和 Emilia 迭代了个版本，速度快了十倍差不多，有点开心；加班加点一个月的时间现在也算空下来可以继续捣鼓自己的东西了，看着 TODO 清单还是有点缓不过来；也开始意识到到很多东西只能靠自己去挖掘和尝试，能从团队汲取和接触到的东西十分受限，危机感这么开心🎂</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;六月份到现在利用空闲的时间尝试了挺多之前没有接触过的东西，总的来说挺充实的感觉。趁着加班一个月的项目刚上线， Lia 也在今天迭代了 v2.0.0，抽空理一下这段时间的流水账。&lt;/p&gt;
    
    </summary>
    
    
      <category term="碎屑" scheme="http://cupools.github.io/tags/%E7%A2%8E%E5%B1%91/"/>
    
  </entry>
  
  <entry>
    <title>Hot Module Replacement 介绍</title>
    <link href="http://cupools.github.io/2016/07010/"/>
    <id>http://cupools.github.io/2016/07010/</id>
    <published>2016-06-30T16:00:00.000Z</published>
    <updated>2016-08-26T07:51:58.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Hot Module Replacement (HMR) exchanges, adds, or removes modules while an application is running without a page reload.</p>
</blockquote>
<p>HMR（模块热替换）带来了比 LiveReload 更加愉悦的开发体验，允许在不刷新页面的情况下更新改动的模块。这里的模块包括 JS, CSS, 图片等，部分模块如 HTML 如果不允许热替换则会触发页面刷新。如果是 React 开发的话，写一个下午代码可能也不需要刷新页面的说（当然 Redux 和 React-Router 要折腾一下先）。</p>
<a id="more"></a>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><blockquote>
<p>Webpacks adds a small HMR runtime to the bundle, during the build process, that runs inside your app. When the build completes, Webpack does not exit but stays active, watching the source files for changes. If Webpack detects a source file change, it rebuilds only the changed module(s). Depending on the settings, Webpack will either send a signal to the HMR runtime, or the HMR runtime will poll webpack for changes. Either way, the changed module is sent to the HMR runtime which then tries to apply the hot update. First it checks whether the updated module can self-accept. If not, it checks those modules that have required the updated module. If these too do not accept the update, it bubbles up another level, to the modules that required the modules that required the changed module. This bubbling-up will continue until either the update is accepted, or the app entry point is reached, in which case the hot update fails.</p>
</blockquote>
<p>差不多就是在开发构建的过程中，webpack 将 HMR 相关的 <a href="https://github.com/webpack/webpack/blob/master/lib/HotModuleReplacement.runtime.js" target="_blank" rel="external">runtime</a> 同时打包到项目中，然后 webpack 监听文件改动，在增量编译之后将改动的模块信息通过 EventSource 发送到浏览器端，HMR runtime 收到信号后判断改动的模块是否接受更新，否则更新事件向上冒泡。这里判断是否接受更新的依据是模块会带有如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">...</div><div class="line">if(<span class="built_in">module</span>.hot) &#123;</div><div class="line">    <span class="built_in">module</span>.hot.accept();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="module-hot"><a href="#module-hot" class="headerlink" title="module.hot"></a>module.hot</h2><p>module.hot 的常见方法如下</p>
<h3 id="accept"><a href="#accept" class="headerlink" title="accept"></a>accept</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">accept(dependencies: string[], callback: (updatedDependencies) =&gt; <span class="keyword">void</span>) =&gt; <span class="keyword">void</span></div><div class="line">accept(dependency: string, callback: () =&gt; <span class="keyword">void</span>) =&gt; <span class="keyword">void</span></div></pre></td></tr></table></figure>
<p>接受指定依赖模块的代码更新。<code>callback</code> 将在依赖模块被替换的时候调用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">accept([errHandler]) =&gt; <span class="keyword">void</span></div></pre></td></tr></table></figure>
<p>接受本模块的代码更新且不通知 parents 模块。如果模块没有 exports 任何方法或者属性，则应该用这种方法接受更新。<code>errHandler</code> 将在加载更新模块抛出异常的时候被调用。</p>
<h3 id="decline"><a href="#decline" class="headerlink" title="decline"></a>decline</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">decline(dependencies: string[]) =&gt; <span class="keyword">void</span></div><div class="line">decline(dependency: string) =&gt; <span class="keyword">void</span></div></pre></td></tr></table></figure>
<p>不接受指定依赖模块的更新。如果依赖模块发生代码变动，则更新会被 <code>decline</code> 的状态码停止。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">decline() =&gt; void</div></pre></td></tr></table></figure>
<p>标识当前模块不接受模块热替换。如果当前模块发生代码变动，则更新会被 <code>decline</code> 的状态码停止。</p>
<h3 id="dispose-addDisposeHandler"><a href="#dispose-addDisposeHandler" class="headerlink" title="dispose/addDisposeHandler"></a>dispose/addDisposeHandler</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">dispose(callback: (data: object) =&gt; <span class="keyword">void</span>) =&gt; <span class="keyword">void</span></div><div class="line">addDisposeHandler(callback: (data: object) =&gt; <span class="keyword">void</span>) =&gt; <span class="keyword">void</span></div></pre></td></tr></table></figure>
<p>添加一个 one time handler, 在当前模块发生热替换的时候执行。允许销毁和移除之前声明或者创建的内容（比如绑定的 DOM 事件）。如果想从旧的模块传递状态到更新后的模块，可以把数据放在 data 对象。在替换后的模块中允许通过 module.hot.data 访问。</p>
<h3 id="removeDisposeHandler"><a href="#removeDisposeHandler" class="headerlink" title="removeDisposeHandler"></a>removeDisposeHandler</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">removeDisposeHandler(callback: (data: object) =&gt; void) =&gt; void</div></pre></td></tr></table></figure>
<p>移除 handler。允许添加临时的 dispose handler, 并在需要的时候移除。比如在多个步骤的异步函数执行的过程中，如果进行代码热替换则需要触发 handler 销毁状态，而当执行完成时可以移除 handler。</p>
<p>更多内容见 <a href="https://github.com/webpack/docs/wiki/hot-module-replacement" target="_blank" rel="external">Github wiki</a></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>这里提供一个简单配置的例子，使用 <a href="https://github.com/webpack/webpack-dev-server" target="_blank" rel="external">webpack-dev-server</a> 作为开发服务器并配置启用 HMR。</p>
<h3 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><p>配置文件需要关注的是 <code>entry</code>, <code>output.publicPath</code> 和 <code>plugins</code>。</p>
<h3 id="entry"><a href="#entry" class="headerlink" title="- entry"></a>- <code>entry</code></h3><p>需要在每个入口文件注入 runtime，以便浏览器能够处理更新信号。同时也需要带上开发服务器的 IP 和端口。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">entry: [</div><div class="line">    <span class="string">'webpack-dev-server/client?http://127.0.0.1:3000'</span>,</div><div class="line">    <span class="string">'webpack/hot/dev-server'</span>,</div><div class="line">    <span class="string">'./src/index.js'</span></div><div class="line">],</div></pre></td></tr></table></figure>
<h3 id="output-publicPath"><a href="#output-publicPath" class="headerlink" title="- output.publicPath"></a>- <code>output.publicPath</code></h3><p><code>publicPath</code> 是发布路径，需要与 <code>path</code> 构建输出路径区分开。这里设置为 <code>/</code>，则在开发服务器中引用打包文件的方式为 <code>http://127.0.0.1/bundle.js</code></p>
<h3 id="plugins"><a href="#plugins" class="headerlink" title="- plugins"></a>- <code>plugins</code></h3><p>需要在 <code>plugins</code> 中增加两个插件如下。前者在增量编译的过程中提供热替换所使用的模块 (updated chunks)，后者使得在编译过程抛出异常时不会输出错误的构建资源，也不会触发 HMR。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">plugins: [</div><div class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</div><div class="line">    <span class="keyword">new</span> webpack.NoErrorsPlugin()</div><div class="line">],</div></pre></td></tr></table></figure>
<p>完整的配置文件如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    entry: [</div><div class="line">        <span class="string">'webpack-dev-server/client?http://127.0.0.1:3000'</span>,</div><div class="line">        <span class="string">'webpack/hot/dev-server'</span>,</div><div class="line">        <span class="string">'./src/index.js'</span></div><div class="line">    ],</div><div class="line">    output: &#123;</div><div class="line">        path: path.join(process.cwd(), <span class="string">'build/asserts/'</span>),</div><div class="line">        filename: <span class="string">'bundle.js'</span>,</div><div class="line">        publicPath: <span class="string">'/'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">        loaders: [&#123;</div><div class="line">            test: <span class="regexp">/\.js?$/</span>,</div><div class="line">            loader: <span class="string">'babel?presets[]=es2015'</span>,</div><div class="line">            exclude: <span class="regexp">/node_modules/</span></div><div class="line">        &#125;]</div><div class="line">    &#125;,</div><div class="line">    plugins: [</div><div class="line">        <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</div><div class="line">        <span class="keyword">new</span> webpack.NoErrorsPlugin()</div><div class="line">    ],</div><div class="line">    devtool: <span class="string">'eval'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="server-js"><a href="#server-js" class="headerlink" title="server.js"></a>server.js</h3><p>通过 <a href="https://github.com/webpack/webpack-dev-server" target="_blank" rel="external">webpack-dev-server</a> 启用开发服务器。实际开发过程中，直接启用服务器就能根据 webpack.config.js 的配置内容编译并监听文件改动。配置方式如下，比较简单。值得注意的是控制台输出信息的配置需要在这里控制。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// server.js</span></div><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> WebpackDevServer = <span class="built_in">require</span>(<span class="string">'webpack-dev-server'</span>);</div><div class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.config.js'</span>);</div><div class="line"></div><div class="line"><span class="keyword">new</span> WebpackDevServer(webpack(config), &#123;</div><div class="line">    publicPath: config.output.publicPath,</div><div class="line">    hot: <span class="literal">true</span>,</div><div class="line">    historyApiFallback: <span class="literal">true</span>,</div><div class="line">    stats: &#123;</div><div class="line">        colors: <span class="literal">true</span>,</div><div class="line">        noInfo: <span class="literal">true</span>,</div><div class="line">        quiet: <span class="literal">true</span>,</div><div class="line">        chunks: <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">&#125;).listen(<span class="number">3000</span>, <span class="string">'127.0.0.1'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="built_in">console</span>.log(err);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Listening at http://127.0.0.1:3000'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="index-html-amp-index-js"><a href="#index-html-amp-index-js" class="headerlink" title="index.html &amp; index.js"></a>index.html &amp; index.js</h3><p>在根目录下准备一个 index.html 做为测试页面，同时准备好入口文件 src/index.js</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://127.0.0.1:3000/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// index.js</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'It works'</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="built_in">module</span>.hot) &#123;</div><div class="line">    <span class="built_in">module</span>.hot.accept();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要注意的地方是，需要带上 module.hot 以接受更新替换，否则可以在浏览器控制台看到更新信息，模块却没有被替换。详细见 <a href="#module.hot">module.hot</a></p>
<h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ node server.js</div></pre></td></tr></table></figure>
<p>访问 <a href="http://127.0.0.1:3000/" target="_blank" rel="external">http://127.0.0.1:3000/</a></p>
<p>已经完成了所有工作，可以尝试修改 index.js 并通过浏览器控制台查看更新结果了。完整代码见 <a href="https://github.com/cupools/webpack-demo/tree/master/bootstrap" target="_blank" rel="external">Github</a></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>如果是与其他服务器配合使用 HMR 的话，需要 <a href="https://github.com/webpack/webpack-dev-middleware" target="_blank" rel="external">webpack-dev-middleware</a> 和 <a href="https://github.com/glenjamin/webpack-hot-middleware" target="_blank" rel="external">webpack-hot-middleware</a>。具体的实现也跟这里差不多的思路，就不展开了。提供部分主要代码，基于 Express</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line">&#123;</div><div class="line">    entry: [</div><div class="line">        <span class="string">'webpack-hot-middleware/client?reload=true'</span>,</div><div class="line">        <span class="string">'webpack/hot/dev-server'</span>,</div><div class="line">        <span class="string">'./src/index.html'</span></div><div class="line">    ],</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// server.js</span></div><div class="line">compiler = webpack(utils.extendOptions(webpackDevConf));</div><div class="line"></div><div class="line">app.use(webpackDevMiddleware(compiler, &#123;</div><div class="line">    noInfo: <span class="literal">true</span>,</div><div class="line">    quiet: <span class="literal">false</span>,</div><div class="line">    lazy: <span class="literal">false</span>,</div><div class="line">    watchOptions: &#123;</div><div class="line">        aggregateTimeout: <span class="number">300</span>,</div><div class="line">        poll: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    stats: &#123;</div><div class="line">        colors: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;));</div><div class="line"></div><div class="line">app.use(webpackHotMiddleware(compiler));</div></pre></td></tr></table></figure>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>以前会把 webpack 与 FIS3 比较，并尝试配合 Gulp 之类的任务管理工具放在项目中去处理各种开发需求和多人协作，然后会觉得在不同项目中跳跃的时候 webpack 的配置文件会造成不方便和额外的使用成本。然而最近几个自己玩耍的项目都使用 webpack 作为打包工具，可以看到启动一个项目十分简单，而且 webpack 足够强大去满足自己的各种需求，开发体验甩了 FIS3 一大截，特别是配合 React 的开发体验更是愉悦。</p>
<p>HMR 真是极好~<br>webpack 真是极好~</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hot Module Replacement (HMR) exchanges, adds, or removes modules while an application is running without a page reload.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;HMR（模块热替换）带来了比 LiveReload 更加愉悦的开发体验，允许在不刷新页面的情况下更新改动的模块。这里的模块包括 JS, CSS, 图片等，部分模块如 HTML 如果不允许热替换则会触发页面刷新。如果是 React 开发的话，写一个下午代码可能也不需要刷新页面的说（当然 Redux 和 React-Router 要折腾一下先）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://cupools.github.io/tags/JavaScript/"/>
    
      <category term="webpack" scheme="http://cupools.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Sprite 的各种尝试</title>
    <link href="http://cupools.github.io/2016/06280/"/>
    <id>http://cupools.github.io/2016/06280/</id>
    <published>2016-06-27T16:00:00.000Z</published>
    <updated>2016-08-26T06:36:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>去年十月份，为了在 Grunt 上快速合并精灵图，写了 <a href="https://github.com/cupools/img-sprite" target="_blank" rel="external">img-sprite</a>，允许基于 CSS 文件合并精灵图并更新样式。结果回到公司发现构建流程由 Grunt 迁移到了 FIS3，就把它丢一边了。</p>
<p>今年三月份，毕业设计使用 Webpack 作为构建工具的时候也想要 Auto Sprite 的功能，于是很粗糙地改造了 img-sprite 为 img-sprite-plugin，总算完成了任务。</p>
<p>然后到六月份的这段时间里，渐渐的发现 FIS3 自带的 <a href="https://github.com/fex-team/fis-spriter-csssprites" target="_blank" rel="external">fis-spriter-csssprites</a> 不能够满足已有项目的需要，又有了重新写一个的冲动。</p>
<p>由于 img-sprite 无法适应到 FIS3 的编译流程中，干脆用 ES2015 重写，也就是 <a href="https://github.com/cupools/emilia" target="_blank" rel="external">Emilia</a>；此外，为了解决团队组帧动画的使用和 Canvas 一些使用场景上的痛点，又写了另一个模块 <a href="https://github.com/cupools/lia" target="_blank" rel="external">Lia</a>，允许基于图片产出样式文件和精灵图。</p>
<p>于是，去年十月份考虑的 <strong>基于样式文件产出精灵图</strong> 和 <strong>基于图片资源产出精灵图</strong> 两种方式分别通过 <strong>Emilia</strong> 和 <strong>Lia</strong> 都实现了一遍，撒花撒花。</p>
<a id="more"></a>
<h2 id="Emilia"><a href="#Emilia" class="headerlink" title="Emilia"></a>Emilia</h2><blockquote>
<p><code>Emilia</code> 通过分析样式文件并识别其中的标记，如 <code>url(a.png?__sprite)</code>，最终输出更新的样式文件和精灵图片。支持 <code>rem</code> 和 <code>px</code>，包括数值转换。此外，这个模块被设计得更加容易适应不同的框架，如 FIS3 或 Webpack。</p>
</blockquote>
<h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>编译的步骤其实跟 img-sprite 类似，几个关键步骤如下：</p>
<ol>
<li>获取样式</li>
<li>分析样式</li>
<li>获取图片</li>
<li>合并图片</li>
<li>输出图片</li>
<li>更新样式</li>
<li>输出样式</li>
</ol>
<h3 id="获取样式"><a href="#获取样式" class="headerlink" title="获取样式"></a>获取样式</h3><p>为了适应不同的框架，“获取”和“输出”相关的接口被设计为方便开发者重写。如在 fis3-spriter-emilia 中，重写输出样式文件的代码如下，仅替换了 FIS3 中 file 对象（保存引用在 file.node）的内容，而没有写到磁盘。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">emilia.outputStyle = <span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</div><div class="line">     file.node.setContent(file.content);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="分析样式"><a href="#分析样式" class="headerlink" title="分析样式"></a>分析样式</h3><p>在“分析样式”阶段，通过 postcss 对样式文件进行遍历，抓取标记。而我之前在 img-sprite 的实现中，则是实现了 <a href="https://github.com/cupools/img-sprite/blob/master/lib/traverse.js" target="_blank" rel="external">Traverse</a> 用于深度遍历 <a href="https://github.com/reworkcss/css" target="_blank" rel="external">css</a> 转换出来的 AST，与 postcss 的做法感觉很相似。</p>
<h3 id="合并图片"><a href="#合并图片" class="headerlink" title="合并图片"></a>合并图片</h3><p>这里为了兼容 FIS3，Emilia 在整个编译过程中没有使用异步操作。为此在合并图片的过程中通过 <code>child_process.execFileSync</code> 阻塞事件循环。这或许是造成编译速度慢的原因之一。</p>
<h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>fis-spriter-emilia 与 fis-spriter-csssprite 比较如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">&nbsp;</th>
<th style="text-align:center">fis-spriter-emilia</th>
<th style="text-align:center">fis-spriter-cssspriter</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">编译速度</td>
<td style="text-align:center">较慢，瓶颈在于坐标计算和合并图片</td>
<td style="text-align:center">快</td>
</tr>
<tr>
<td style="text-align:left">数值单位</td>
<td style="text-align:center">支持任意单位，包括 <code>rem</code> 和 <code>px</code></td>
<td style="text-align:center">只支持 <code>px</code></td>
</tr>
<tr>
<td style="text-align:left">数值缩放</td>
<td style="text-align:center">支持缩放任意倍数，用于 <code>rem</code> 或 Retina 场景</td>
<td style="text-align:center">不支持</td>
</tr>
<tr>
<td style="text-align:left">内联样式分析</td>
<td style="text-align:center">不支持</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:left">图片标记</td>
<td style="text-align:center">多个标记对应多套精灵图</td>
<td style="text-align:center">sprites，对应单一精灵图</td>
</tr>
<tr>
<td style="text-align:left">图片样式</td>
<td style="text-align:center">不支持 repeat</td>
<td style="text-align:center">支持 repeat 和 position</td>
</tr>
<tr>
<td style="text-align:left">图片内联</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
</tr>
</tbody>
</table>
<p>由表格可见，fis-spriter-emilia 的优势体现在 <strong><code>rem</code>的支持</strong> 和 <strong>多套精灵图的产出</strong>，而这恰恰解决了我们团队在移动端的两个使用场景：<code>rem</code> 用于自适应；多套精灵图片用于图片懒加载。</p>
<p>速度慢的问题将在搞定手上的这一波需求之后进行优化，可能会完全重构计算和合并图片部分代码。</p>
<h2 id="Lia"><a href="#Lia" class="headerlink" title="Lia"></a>Lia</h2><blockquote>
<p><code>Lia</code> 通过 <code>sprite_conf.js</code> 的配置命中图片资源，然后输出精灵图片和样式文件到指定文件夹。</p>
</blockquote>
<p>我自己很喜欢 Lia 这个模块，原因是简单。合并组帧图只需要 <code>lia here</code>，初始化配置文件用 <code>lia init</code>，开发偶尔 <code>lia</code> 更新精灵图样式文件或者直接 <code>lia -w</code> 就完成了所有事情。</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol>
<li>支持 <code>rem</code>，支持数值转换</li>
<li>一次性输出多套精灵图片和样式文件</li>
<li>监听文件变化并且按需编译输出样式文件和图片</li>
<li>允许在当前文件夹下快速合并图片，多用于合并组帧动画的图片</li>
<li>支持自定义模板，以此支持输出 SCSS, LESS, JS, JSON 等等任意格式的文件</li>
</ol>
<h3 id="模块设计"><a href="#模块设计" class="headerlink" title="模块设计"></a>模块设计</h3><p>主模块 <a href="https://github.com/cupools/lia/blob/master/src/lia.js" target="_blank" rel="external">lia.js</a> 的代码量不多，提供了根据路径命中图片并输出精灵图和样式文件的功能。其他功能如快速合并图片、文件监听则通过相应的扩展实现，最终代码结构也就比较清晰。在这个基础上，也容易根据需要继续扩展其他功能。</p>
<h3 id="文件监听"><a href="#文件监听" class="headerlink" title="文件监听"></a>文件监听</h3><p>文件监听这部分功能基于 <a href="https://github.com/paulmillr/chokidar" target="_blank" rel="external">chokidar</a> 实现。在文件改动的时候按需重新编译，其中做了几点优化：</p>
<ol>
<li>一个时间段内（1000ms）的多个文件改动记录会被归并到一次变更检查中。</li>
<li>变更检查时，先重新匹配命中规则的图片，判断需要合并的图片数量是否变化；否则会拿到所有改动的文件判断是否从属与某个精灵图。有效的改动会触发所属的精灵图的重新编译。</li>
<li>在命中规则中过滤产出的精灵图，避免触发不必要的变更检查。</li>
</ol>
<h3 id="自定义模板"><a href="#自定义模板" class="headerlink" title="自定义模板"></a>自定义模板</h3><p>提供了 <code>tmpl</code> 和 <code>wrap</code> 两个参数，以支持产出 JS, JSON 等格式，可用于 canvas 动画场景中提供精灵图的坐标等信息。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Emilia 和 Lia 同样处理 sprite 却是以两种不用的形式，满足了目前团队不同使用场景的需要。当然目前可优化的点还有很多，至少跟竞品的比较就有许多不足了，也有实践不足的原因导致一些潜在的问题没有被抛出来。</p>
<p>在写这两个模块的过程中我也会考虑这类型的 sprite 工具随着国内移动网络速度的提升以及在和 Lazyload，Icon Fonts 等优化手段的比较下是否还有合并图片的必要性。回头想想，作为一种开发和使用成本都较低的优化手段，能够解决目前存在的一两个痛点已经值得去尝试了。</p>
<p><s>然后 Emilia 其实是《Re:从零开始的异世界生活》的银发半精灵少女</s></p>
<p>最后感谢老大支持这种东西，给了一个多星期的时间没压需求下来😂</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去年十月份，为了在 Grunt 上快速合并精灵图，写了 &lt;a href=&quot;https://github.com/cupools/img-sprite&quot;&gt;img-sprite&lt;/a&gt;，允许基于 CSS 文件合并精灵图并更新样式。结果回到公司发现构建流程由 Grunt 迁移到了 FIS3，就把它丢一边了。&lt;/p&gt;
&lt;p&gt;今年三月份，毕业设计使用 Webpack 作为构建工具的时候也想要 Auto Sprite 的功能，于是很粗糙地改造了 img-sprite 为 img-sprite-plugin，总算完成了任务。&lt;/p&gt;
&lt;p&gt;然后到六月份的这段时间里，渐渐的发现 FIS3 自带的 &lt;a href=&quot;https://github.com/fex-team/fis-spriter-csssprites&quot;&gt;fis-spriter-csssprites&lt;/a&gt; 不能够满足已有项目的需要，又有了重新写一个的冲动。&lt;/p&gt;
&lt;p&gt;由于 img-sprite 无法适应到 FIS3 的编译流程中，干脆用 ES2015 重写，也就是 &lt;a href=&quot;https://github.com/cupools/emilia&quot;&gt;Emilia&lt;/a&gt;；此外，为了解决团队组帧动画的使用和 Canvas 一些使用场景上的痛点，又写了另一个模块 &lt;a href=&quot;https://github.com/cupools/lia&quot;&gt;Lia&lt;/a&gt;，允许基于图片产出样式文件和精灵图。&lt;/p&gt;
&lt;p&gt;于是，去年十月份考虑的 &lt;strong&gt;基于样式文件产出精灵图&lt;/strong&gt; 和 &lt;strong&gt;基于图片资源产出精灵图&lt;/strong&gt; 两种方式分别通过 &lt;strong&gt;Emilia&lt;/strong&gt; 和 &lt;strong&gt;Lia&lt;/strong&gt; 都实现了一遍，撒花撒花。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://cupools.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>webpack 你好</title>
    <link href="http://cupools.github.io/2016/05090/"/>
    <id>http://cupools.github.io/2016/05090/</id>
    <published>2016-05-08T16:00:00.000Z</published>
    <updated>2016-08-26T07:52:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>花了一个多月的时间捣鼓 webpack 的各种东西，终于把毕业设计搞出来了，看起来很糟糕的工作流程。然后就是拖了一个多月时间的总结咯，会记录 webpack 的使用以及自己对 webpack 和 FIS3 的一些想法，然后插件开发就留着下次好了。</p>
<a id="more"></a>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote>
<p>webpack is a bundler for modules. The main purpose is to bundle JavaScript files for usage in a browser, yet it is also capable of transforming, bundling, or packaging just about any resource or asset.</p>
</blockquote>
<p>webpack 是一个模块打包工具，和 Grunt、Gulp 之类的任务管理工具有本质上的区别。根据其设计理念，开发过程中接触到的所有文件资源都是模块。不同类型的文件能够被 webpack 转换为 js 模块并被 js 代码直接引用,同时在打包过程中能够静态分析模块间的依赖关系。</p>
<h2 id="简单的-demo"><a href="#简单的-demo" class="headerlink" title="简单的 demo"></a>简单的 demo</h2><p><img src="/images/webpack/demo0_bundle.gif" alt="demo0 bundle"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// main.js</span></div><div class="line"><span class="built_in">document</span>.body.innerHTML += <span class="string">'&lt;p&gt;main.js works&lt;/p&gt;'</span>;</div><div class="line"></div><div class="line"><span class="built_in">require</span>(<span class="string">'./style.scss'</span>);</div><div class="line"><span class="built_in">document</span>.body.innerHTML += <span class="string">'&lt;p&gt;style.scss works&lt;/p&gt;'</span>;</div><div class="line"></div><div class="line"><span class="built_in">require</span>(<span class="string">'./foo.js'</span>);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    entry: <span class="string">'./src/main.js'</span>,</div><div class="line">    output: &#123;</div><div class="line">        path: <span class="string">'build/'</span>,</div><div class="line">        filename: <span class="string">'bundle.js'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">        loaders: [&#123;</div><div class="line">            test: <span class="regexp">/\.scss$/</span>,</div><div class="line">            loader: <span class="string">'style!css!sass'</span></div><div class="line">        &#125;]</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>目录下执行 <code>webpack</code>, 构建结果如下，输出了 bundle.js。由于 main.js, foo.js, style.scss 都被打包到 bundle.js, 因此 index.html 只需要加载 bundle.js 就可以了。</p>
<p><img src="/images/webpack/demo0.png" alt="demo0"></p>
<p>webpack 就做了这么些东西。</p>
<p><a href="https://github.com/cupools/webpack-demo/tree/master/demo0" target="_blank" rel="external">DEMO 代码仓库</a></p>
<h2 id="entry-amp-output"><a href="#entry-amp-output" class="headerlink" title="entry &amp; output"></a>entry &amp; output</h2><blockquote>
<p>entry: The entry point for the bundle.<br>output: Options affecting the output of the compilation.</p>
</blockquote>
<p>简单理解，entry 是页面的入口文件，有点“启动器”的感觉；output 是输出文件的一些配置，包括文件输出路径，文件命名，CDN 之类的。以之前的 demo 为例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="comment">// 入口文件</span></div><div class="line">    entry: <span class="string">'./src/main.js'</span>,</div><div class="line">    <span class="comment">// 输出配置</span></div><div class="line">    output: &#123;</div><div class="line">         <span class="comment">// 输出的路径</span></div><div class="line">        path: <span class="string">'build/'</span>,</div><div class="line">        <span class="comment">// 输出文件名，相对路径</span></div><div class="line">        filename: <span class="string">'bundle.js'</span></div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Loader-amp-Plugin"><a href="#Loader-amp-Plugin" class="headerlink" title="Loader &amp; Plugin"></a>Loader &amp; Plugin</h2><h3 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h3><blockquote>
<p>Loaders are transformations that are applied on a resource file of your app</p>
</blockquote>
<p>webpack 通过配置 loader (加载器)实现对任意类型文件的打包。还是以之前的 demo 为例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    module: &#123;</div><div class="line">        loaders: [&#123;</div><div class="line">            test: <span class="regexp">/\.scss$/</span>,</div><div class="line">            loader: <span class="string">'style!css!sass'</span></div><div class="line">        &#125;]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>test</code> 通过正则表达式匹配命中的文件，<code>loader</code> 指定该文件被哪些 loader 处理。</p>
<p>这里匹配的是 .scss 文件；<code>!</code> 作为分隔符，实际上指定了 style-loader, css-loader, sass-loader 三个加载器，等价于 <code>[&#39;style&#39;, &#39;css&#39;, &#39;sass&#39;]</code>。每一个文件依序被 sass-loader, css-loader, style-loader 处理，最终转换为 js 模块被 main.js 直接引用，并在执行过程中向页面插入 style 标签，以此嵌入样式。</p>
<p>使用 webpack 还会经常见到类似 <code>style!css?sourceMap!sass?sourceMap</code> 的写法，为 loader 提供配置参数。把他当做 URL query 看待就舒服多了。</p>
<p>瞄一下简单的 <a href="https://github.com/webpack/html-loader/blob/master/index.js#L93-L102" target="_blank" rel="external">html-loader</a> 能够更好地理解 loader 是如何工作。</p>
<h3 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h3><blockquote>
<p>Use plugins to add functionality typically related to bundles in webpack. </p>
</blockquote>
<p>webpack 中的插件比 loader 有更多能力，能够在构建过程中的各个阶段对文件资源进行操作。常见的配置方式如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">        ...</div><div class="line">    &#125;,</div><div class="line">    plugins: [</div><div class="line">        <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</div><div class="line">        <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">'common.js'</span>)</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里使用的 webpack 自带的 <a href="https://webpack.github.io/docs/optimization.html#minimize" target="_blank" rel="external">optimize.UglifyJsPlugin</a>，直接将其实例作为参数就能够根据默认配置选项对代码进行压缩混淆；<a href="https://webpack.github.io/docs/code-splitting.html#multiple-entry-chunks" target="_blank" rel="external">optimize.CommonsChunkPlugin</a> 则将公共代码模块提取出来独立打包。同时还有其他常用的插件还有 <a href="https://github.com/webpack/extract-text-webpack-plugin" target="_blank" rel="external">extract-text-plugin</a>, <a href="https://github.com/ampedandwired/html-webpack-plugin" target="_blank" rel="external">html-webpack-plugin</a> 等。</p>
<p>由于 webpack 的 plugin 的配置没有规范，感觉就和 Grunt 差不多然后导致了要用什么插件就去找什么文档，所以就不继续巴拉咯。</p>
<h2 id="复杂的-demo"><a href="#复杂的-demo" class="headerlink" title="复杂的 demo"></a>复杂的 demo</h2><p>列举一些要实现的功能，然后通过 webpack 实现。</p>
<ol>
<li>es2015，sass 等支持</li>
<li>各种模块规范支持</li>
<li>代码校验压缩混淆</li>
<li>维护资源依赖关系</li>
<li>资源定位和输出</li>
<li>合并公共模块</li>
<li>文件名添加 MD5 戳和长缓存</li>
<li>添加 CDN 地址</li>
</ol>
<p>考虑到上面的东西，webpack.config.js 代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>),</div><div class="line">    HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>),</div><div class="line">    ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="comment">// 基本目录(绝对路径)，entry 配置项会基于 context 定位文件</span></div><div class="line">    context: __dirname + <span class="string">'/app'</span>,</div><div class="line">    <span class="comment">// 入口文件的配置，这里每个 page 配置一个入口 js</span></div><div class="line">    entry: &#123;</div><div class="line">        page0: <span class="string">'./page0/page0.js'</span>,</div><div class="line">        page1: <span class="string">'./page1/page1.js'</span>,</div><div class="line">        <span class="comment">// 这里配合 commonPlugin 实现JS库的独立打包，实现长缓存</span></div><div class="line">        vendor: [<span class="string">'./lib/webpack-zepto'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 输出配置</span></div><div class="line">    output: &#123;</div><div class="line">        <span class="comment">// 输出路径，默认是 process.cwd()</span></div><div class="line">        path: <span class="string">'build/'</span>,</div><div class="line">        <span class="comment">// 输出的文件名，name 对应 `entry` 配置的键名</span></div><div class="line">        filename: <span class="string">'assets/[name].entry.[chunkhash:6].js'</span>,</div><div class="line">        <span class="comment">// 发布地址</span></div><div class="line">        publicPath: <span class="string">'/'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">        <span class="comment">// 在 loader 处理之前处理匹配模块</span></div><div class="line">        preLoaders: [</div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.js$/</span>,</div><div class="line">                loader: <span class="string">'jshint-loader'</span>,</div><div class="line">                exclude: <span class="regexp">/node_modules|lib/</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        loaders: [&#123;</div><div class="line">            <span class="comment">// babel-loader 的配置，排除 node_modules</span></div><div class="line">            test: <span class="regexp">/\.js$/</span>,</div><div class="line">            loader: <span class="string">'babel?presets=es2015'</span>,</div><div class="line">            exclude: <span class="regexp">/node_modules/</span></div><div class="line">        &#125;, &#123;</div><div class="line">            <span class="comment">// css-loader 和 sass-loader，同时配置 extract-text-plugin 输出独立的样式文件</span></div><div class="line">            test: <span class="regexp">/\.(css|scss)$/</span>,</div><div class="line">            loader: ExtractTextPlugin.extract([<span class="string">'css'</span>, <span class="string">'sass'</span>])</div><div class="line">        &#125;, &#123;</div><div class="line">            <span class="comment">// url-loader，配置图片输出命名和内联大小限制</span></div><div class="line">            test: <span class="regexp">/\.(png|jpg)$/</span>,</div><div class="line">            loader: <span class="string">'url'</span>,</div><div class="line">            query: &#123;</div><div class="line">                name: <span class="string">'assets/images/[name].[hash:6].[ext]'</span>,</div><div class="line">                limit: <span class="number">8192</span></div><div class="line">            &#125;</div><div class="line">        &#125;, &#123;</div><div class="line">            <span class="comment">// html-loader，解决 img 标签的图片资源定位</span></div><div class="line">            test: <span class="regexp">/\.html$/</span>,</div><div class="line">            loader: <span class="string">'html?-minimize'</span></div><div class="line">        &#125;]</div><div class="line">    &#125;,</div><div class="line">    plugins: [</div><div class="line">        <span class="comment">// html-webpack-plugin</span></div><div class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">            filename: <span class="string">'page0.html'</span>,</div><div class="line">            template: <span class="string">'page0/page0.html'</span>,</div><div class="line">            excludeChunks: [<span class="string">'page1'</span>]</div><div class="line">        &#125;),</div><div class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">            filename: <span class="string">'page1.html'</span>,</div><div class="line">            template: <span class="string">'page1/page1.html'</span>,</div><div class="line">            excludeChunks: [<span class="string">'page0'</span>]</div><div class="line">        &#125;),</div><div class="line">        <span class="comment">// 提取公共模块</span></div><div class="line">        <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">'commons'</span>, <span class="string">'assets/common.[hash:6].js'</span>, [<span class="string">'page0'</span>, <span class="string">'page1'</span>]),</div><div class="line">        <span class="comment">// 提取公共库，vendor 见 `entry` 配置</span></div><div class="line">        <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">'vendor'</span>, <span class="string">'assets/vendor.[chunkhash:6].js'</span>),</div><div class="line">        <span class="comment">// 输出独立样式文件，配置文件命名</span></div><div class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'assets/[name].[chunkhash:6].css'</span>, &#123;</div><div class="line">            allChunks: <span class="literal">true</span></div><div class="line">        &#125;),</div><div class="line">        <span class="comment">// 代码混淆压缩</span></div><div class="line">        <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin()</div><div class="line">    ],</div><div class="line">    resolve: &#123;</div><div class="line">        <span class="comment">// 增加解析根路径，可直接 require 到 lib 里面的模块</span></div><div class="line">        root: [process.cwd() + <span class="string">'/app/lib'</span>],</div><div class="line">        alias: &#123;</div><div class="line">            zepto: <span class="string">'webpack-zepto'</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// jshint 配置</span></div><div class="line">    jshint: &#123;</div><div class="line">        esnext: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>然后执行打包，结果如下</p>
<p><img src="/images/webpack/demo1_shell.png" alt="demo1_shell"></p>
<p><img src="/images/webpack/demo1_bundle.png" alt="demo1_build"></p>
<p>注意到 entry 配置变成了一个 Object, 这里 page0 和 page1 分别是两个不同页面的入口文件，分开打包依赖文件；vendor 则是为了实现公共库的独立打包，而与 page0 和 page1 区分开。</p>
<p>还有这里提到的都是生产环境的打包配置，开发过程中需要 sourceMap, 不需要打 hash 和压缩混淆，还有愉悦的 HMR 虽然看起来很爽但也有很多东西要注意所以拉出来单独巴拉，这里就没有啦。</p>
<p><a href="https://github.com/cupools/webpack-demo/tree/master/demo1" target="_blank" rel="external">DEMO 代码仓库</a></p>
<h2 id="webpack-amp-FIS3"><a href="#webpack-amp-FIS3" class="headerlink" title="webpack &amp; FIS3"></a>webpack &amp; FIS3</h2><p>一开始接触的 FIS3, 发现它确实把我们团队所需要的东西都给考虑进去了，用起来也十分顺手，但总有点不温不火的感觉。考虑了一下 webpack 跟 FIS3 的区别，有以下几点</p>
<ol>
<li>定位不同。webpack 作为模块打包工具，FIS3 作为解决方案。</li>
<li>如果说 FIS3 的亮点在于建立资源依赖表，但其实 webpack 也进行了静态资源分析并维护了 compilation.module, 两者的差别在于 FIS3 核心高度模块化之后提供的资源依赖表简洁清晰、能够轻易被其它前后端的构建框架接受，而 webpack 好像没这方面考虑，提供了 <code>webpack-stats-plugin</code></li>
<li>webpack 的生态比 FIS3 健康很多，包括插件数量和问题解决。FIS3 官方维护的插件有限，第三方维护的插件质量难以保障，发现了问题很难找到相应的内容，这是用 FIS3 少有的不开心的地方。</li>
<li>FIS 的所谓代码入侵性应该是指 <code>__url</code> 之类的标记的注入，对应的 webpack 通过将各种文件资源编译成 JS 模块并通过模块管理工具直接 require 引用。</li>
<li>webpack 配置文件复杂，插件的使用缺少规范，学习成本高；FIS3 则是类 CSS 风格的配置语法，容易理解和接受。后者比前者在配置方面要灵活很多。webpack 难以在不同项目中复用配置，但 FIS3 就轻松很多了。</li>
<li>webpack 在 Web Component 和 css module 方面的支持通过 loader 实现，但 FIS3 在这两方面似乎还没有出现解决方法。</li>
<li>webpack 有 HMR, FIS3 有简单的 LiveReload。</li>
<li>webpack 插件开发的学习成本高，很难找到相关的文档，只能听作者的话啃源码，相比 FIS3 就低很多了，更加清爽。</li>
</ol>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>webpack 用起来还是很吸引人的，但是配置文件的维护在短周期项目大量存在的情况下会增加使用成本；FIS3 在这类项目中使用很让人放心，偶尔遇到问题了就偶尔纠结一下。看项目类型需要咯~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;花了一个多月的时间捣鼓 webpack 的各种东西，终于把毕业设计搞出来了，看起来很糟糕的工作流程。然后就是拖了一个多月时间的总结咯，会记录 webpack 的使用以及自己对 webpack 和 FIS3 的一些想法，然后插件开发就留着下次好了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="http://cupools.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>用 Sass 写 css3 动画</title>
    <link href="http://cupools.github.io/2016/05070/"/>
    <id>http://cupools.github.io/2016/05070/</id>
    <published>2016-05-07T08:00:00.000Z</published>
    <updated>2016-08-26T07:52:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前也在用 Sass 和 Stylus，不过局限在嵌套、变量之类的简单使用，对其他特性敬而远之，觉得在写样式的过程中过多去考虑这一块会降低页面重构效率。直到最近项目中出现了大量 css 动画，一想到要重复调整关键帧和统一多个元素的入场动画太麻烦啦，于是决定试试 mixin，然后发现效率提高了不止一丢丢这么厉害。</p>
<a id="more"></a>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote>
<p>Sass is the most mature, stable, and powerful professional grade CSS extension language in the world.</p>
</blockquote>
<h2 id="渐现入场"><a href="#渐现入场" class="headerlink" title="渐现入场"></a>渐现入场</h2><p>滑屏的 H5, 每一屏会有文字渐现入场，然后这种类型的动画我习惯用 transition 并改变 opacity 或 transform 去实现类似的效果，然后写了这样的混合器。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> fadeIn(<span class="variable">$class</span>, <span class="variable">$duration</span>:<span class="number">0.8s</span>, <span class="variable">$delay</span>: .5s, <span class="variable">$tag</span>: play) &#123;</div><div class="line">    .#&#123;<span class="variable">$class</span>&#125; &#123;</div><div class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    &amp;.#&#123;<span class="variable">$tag</span>&#125; .#&#123;<span class="variable">$class</span>&#125; &#123;</div><div class="line">        <span class="attribute">transition</span>: opacity <span class="variable">$duration</span> <span class="variable">$delay</span>;</div><div class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用的时候，这样子</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.slogan</span> &#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line">@<span class="keyword">include</span> fadeIn(</div><div class="line">    <span class="variable">$class</span>: <span class="string">'slogan'</span>,</div><div class="line">    <span class="variable">$delay</span>: 1s,</div><div class="line">    <span class="variable">$duration</span>: .8s</div><div class="line">);</div></pre></td></tr></table></figure>
<p>最后输出这样子</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.slogan</span> &#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.slogan</span> &#123;</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.play</span> <span class="selector-class">.slogan</span> &#123;</div><div class="line">    <span class="attribute">transition</span>: opacity .<span class="number">8s</span> <span class="number">1s</span>;</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>就这样把动画的部分和样式分离开了，至于为什么不把 transition 写在元素初始的样式里，这里考虑到的是翻屏之后不会出现动画回滚的状态，也就是排除了 opacity from 1 to 0 的渐变过程。</p>
<h2 id="组帧动画"><a href="#组帧动画" class="headerlink" title="组帧动画"></a>组帧动画</h2><p>由于项目基于 FIS 开发，这里精灵图的处理也就没那么灵活了，因为没法产出多套精灵图片，也就无法实现图片的懒加载。对于精灵图的处理，暂时使用了这样的原始方式。</p>
<p>首先，通过 <a href="http://sjli.github.io/spritemaker_extjs/example.html" target="_blank" rel="external">CssSprite在线生成器</a> 生成垂直排列的精灵图，每一帧有固定的宽高，如下截取部分</p>
<p><img src="/images/sass-16-05-08/cmp6_keyframes_tumb.png" alt="keyframes"></p>
<p>然后这里又写了个 mixin, 注释写成这样不要在意…写完回头看一下虽然逻辑不复杂但是很好用窝</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><div class="line"><span class="comment">// keyframes_ani</span></div><div class="line"><span class="comment">// ------------------------------------</span></div><div class="line"><span class="comment">// @param    $animation_name    动画名称</span></div><div class="line"><span class="comment">// @param    $background        精灵图片</span></div><div class="line"><span class="comment">// @param    $height            容器高度</span></div><div class="line"><span class="comment">// @param    $count             帧数</span></div><div class="line"><span class="comment">// @param    $duration          动画时长，默认为 2s</span></div><div class="line"><span class="comment">// @param    $delay             动画延时，默认为 0s</span></div><div class="line"><span class="comment">// @param    $weight            每一帧在整个动画过程所占时间长短的权重，map 中必须包含 null 为缺省权重，默认为 1</span></div><div class="line"><span class="comment">// @param    $times             播放次数，默认为 forwards</span></div><div class="line"><span class="comment">// ------------------------------------</span></div><div class="line">@<span class="keyword">mixin</span> keyframes_ani(<span class="variable">$animation_name</span>, <span class="variable">$background</span>, <span class="variable">$height</span>, <span class="variable">$count</span>, <span class="variable">$duration</span>: 2s, <span class="variable">$delay</span>: 0s, <span class="variable">$weight</span>: (null: 1), <span class="variable">$times</span>: forwards) &#123;</div><div class="line">    <span class="attribute">background</span>: <span class="variable">$background</span> no-repeat;</div><div class="line">    <span class="attribute">animation</span>: <span class="variable">$animation_name</span> <span class="variable">$duration</span> <span class="variable">$delay</span> steps(<span class="number">1</span>) <span class="variable">$times</span>;</div><div class="line"></div><div class="line">    <span class="variable">$vals</span>: ();</div><div class="line">    <span class="variable">$sum</span>: <span class="number">0</span>;</div><div class="line"></div><div class="line">    @<span class="keyword">for</span> <span class="variable">$i</span> from 0 to <span class="variable">$count</span> &#123;</div><div class="line">        <span class="variable">$key</span>: <span class="variable">$i</span> + <span class="number">1</span>;</div><div class="line">        <span class="variable">$vals</span>: append(<span class="variable">$vals</span>, <span class="variable">$sum</span>);</div><div class="line">        </div><div class="line">        @<span class="keyword">if</span> (map-has-key(<span class="variable">$weight</span>, <span class="variable">$key</span>)) &#123;</div><div class="line">            <span class="variable">$sum</span>: <span class="variable">$sum</span> + map-get(<span class="variable">$weight</span>, <span class="variable">$key</span>);</div><div class="line">        &#125; @<span class="keyword">else</span> &#123;</div><div class="line">            <span class="variable">$sum</span>: <span class="variable">$sum</span> + map-get(<span class="variable">$weight</span>, null);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="variable">$avg</span>: floor(<span class="number">100</span> / <span class="variable">$sum</span>);</div><div class="line">    </div><div class="line">    @keyframes #&#123;<span class="variable">$animation_name</span>&#125; &#123;</div><div class="line">        @<span class="keyword">for</span> <span class="variable">$i</span> from 0 to <span class="variable">$count</span> &#123;</div><div class="line">            #&#123;nth(<span class="variable">$vals</span>, <span class="variable">$i</span> + 1) * <span class="variable">$avg</span> * 1%&#125; &#123;</div><div class="line">                <span class="attribute">background-position</span>: <span class="number">0</span> (<span class="variable">$i</span> * <span class="variable">$height</span> * -<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        100% &#123;</div><div class="line">            <span class="attribute">background-position</span>: <span class="number">0</span> ((<span class="variable">$count</span> - <span class="number">1</span>) * <span class="variable">$height</span> * -<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后样式引用 mixin, 并提供必要参数</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.people</span> &#123;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">113px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">113px</span>;</div><div class="line">    @<span class="keyword">include</span> keyframes_ani(</div><div class="line">        <span class="variable">$animation_name</span>: people-ani,</div><div class="line">        <span class="variable">$background</span>: url(./people_sprite.png),</div><div class="line">        <span class="variable">$height</span>: 118px,</div><div class="line">        <span class="variable">$weight</span>: (</div><div class="line">            2: 11,</div><div class="line">            11: 19,</div><div class="line">            23: 5,</div><div class="line">            null: 3</div><div class="line">        ),</div><div class="line">        <span class="variable">$count</span>: 24,</div><div class="line">        <span class="variable">$duration</span>: 5s</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后就搞定啦，最终输出代码如下</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.people</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">113px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">113px</span>;</div><div class="line">  <span class="attribute">background</span>: url(./people_sprite.png) no-repeat;</div><div class="line">  <span class="attribute">animation</span>: people-ani <span class="number">5s</span> <span class="number">0s</span> steps(<span class="number">1</span>) forwards;</div><div class="line">&#125;</div><div class="line">@keyframes people-ani &#123;</div><div class="line">  0% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0px</span>;</div><div class="line">  &#125;</div><div class="line">  3% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">118px</span>;</div><div class="line">  &#125;</div><div class="line">  14% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">236px</span>;</div><div class="line">  &#125;</div><div class="line">  17% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">354px</span>;</div><div class="line">  &#125;</div><div class="line">  20% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">472px</span>;</div><div class="line">  &#125;</div><div class="line">  23% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">590px</span>;</div><div class="line">  &#125;</div><div class="line">  26% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">708px</span>;</div><div class="line">  &#125;</div><div class="line">  29% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">826px</span>;</div><div class="line">  &#125;</div><div class="line">  32% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">944px</span>;</div><div class="line">  &#125;</div><div class="line">  35% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">1062px</span>;</div><div class="line">  &#125;</div><div class="line">  38% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">1180px</span>;</div><div class="line">  &#125;</div><div class="line">  57% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">1298px</span>;</div><div class="line">  &#125;</div><div class="line">  60% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">1416px</span>;</div><div class="line">  &#125;</div><div class="line">  63% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">1534px</span>;</div><div class="line">  &#125;</div><div class="line">  66% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">1652px</span>;</div><div class="line">  &#125;</div><div class="line">  69% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">1770px</span>;</div><div class="line">  &#125;</div><div class="line">  72% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">1888px</span>;</div><div class="line">  &#125;</div><div class="line">  75% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">2006px</span>;</div><div class="line">  &#125;</div><div class="line">  78% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">2124px</span>;</div><div class="line">  &#125;</div><div class="line">  81% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">2242px</span>;</div><div class="line">  &#125;</div><div class="line">  84% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">2360px</span>;</div><div class="line">  &#125;</div><div class="line">  87% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">2478px</span>;</div><div class="line">  &#125;</div><div class="line">  90% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">2596px</span>;</div><div class="line">  &#125;</div><div class="line">  95% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">2714px</span>;</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">2714px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里想巴拉下 <code>keyframe_ani</code> 中的 $weight 参数，map 类型，表示每一帧在整个动画过程所占时间长短的<strong>权重</strong>，缺省的帧匹配为 null, 默认为 <code>(null: 1)</code>。这里的权重即是这一关键帧在整个 $duration 中所占的时间比，方便调整 $duration 而不对动画造成其他影响。下面 $weight 的两种写法的结果是一致的。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><div class="line"><span class="variable">$weight</span>: (</div><div class="line">    <span class="number">1</span>: <span class="number">3</span>,</div><div class="line">    <span class="number">4</span>: <span class="number">3</span>,</div><div class="line">    null: <span class="number">1</span></div><div class="line">)</div><div class="line"><span class="variable">$weight</span>: (</div><div class="line">    <span class="number">1</span>: <span class="number">6</span>,</div><div class="line">    <span class="number">4</span>: <span class="number">6</span>,</div><div class="line">    null: <span class="number">2</span></div><div class="line">)</div></pre></td></tr></table></figure>
<p>demo 见 <a href="http://codepen.io/youtbe/pen/MyLmpJ" target="_blank" rel="external">codepen</a>.</p>
<h2 id="曲线运动"><a href="#曲线运动" class="headerlink" title="曲线运动"></a>曲线运动</h2><p>有一屏设计师说要让纸被风吹走，要飞着转几圈，要飞的优雅。这时候如果直接手写关键帧出来的效果应该是不满意的，曲线运动的动画会变的生硬；让我加一块 canvas 我也不干，纯粹强迫症？于是琢磨着也用 Sass 实现，然后就走了这样的歪路。</p>
<p><img src="/images/sass-16-05-08/bezier.gif" alt="animation"></p>
<p>整体的思路，我直接拿了之前星座项目用过的贝塞尔曲线相关的实现，通过关键点生成路径点集，然后粗暴地通过 node 直接生成 sass-variable.scss 文件，里面声明了四个变量，每个变量包含了每个纸片动画过程中50个关键帧的偏移量，然后再通过变量生成 keyframes, 就搞定啦。</p>
<p>代码如下，也很简单就是了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// buildSassVar.js</span></div><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> pointCount = <span class="number">50</span>;</div><div class="line"><span class="keyword">const</span> points = [</div><div class="line">    [&#123;x: <span class="number">0</span>, y: <span class="number">0</span>&#125;,&#123;x: <span class="number">-40</span>, y: <span class="number">-60</span>&#125;, &#123;x: <span class="number">-20</span>, y: <span class="number">250</span>&#125;, &#123;x: <span class="number">-500</span>, y: <span class="number">400</span>&#125;],</div><div class="line">    [&#123;x: <span class="number">0</span>, y: <span class="number">0</span>&#125;,&#123;x: <span class="number">-40</span>, y: <span class="number">140</span>&#125;, &#123;x: <span class="number">120</span>, y: <span class="number">300</span>&#125;, &#123;x: <span class="number">-160</span>, y: <span class="number">800</span>&#125;],</div><div class="line">    [&#123;x: <span class="number">0</span>, y: <span class="number">0</span>&#125;,&#123;x: <span class="number">-100</span>, y: <span class="number">90</span>&#125;, &#123;x: <span class="number">-240</span>, y: <span class="number">180</span>&#125;, &#123;x: <span class="number">-500</span>, y: <span class="number">340</span>&#125;],</div><div class="line">    [&#123;x: <span class="number">0</span>, y: <span class="number">0</span>&#125;,&#123;x: <span class="number">10</span>, y: <span class="number">120</span>&#125;, &#123;x: <span class="number">200</span>, y: <span class="number">220</span>&#125;, &#123;x:<span class="number">150</span>, y: <span class="number">400</span>&#125;, &#123;x:<span class="number">-300</span>, y:<span class="number">600</span>&#125;],</div><div class="line">    [&#123;x: <span class="number">0</span>, y: <span class="number">0</span>&#125;,&#123;x: <span class="number">50</span>, y: <span class="number">10</span>&#125;, &#123;x: <span class="number">50</span>, y: <span class="number">100</span>&#125;, &#123;x: <span class="number">-50</span>, y: <span class="number">400</span>&#125;, &#123;x: <span class="number">-200</span>, y:<span class="number">600</span>&#125;, &#123;x: <span class="number">-400</span>, y:<span class="number">800</span>&#125;]</div><div class="line">];</div><div class="line"></div><div class="line">build();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">build</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> content = <span class="string">''</span>;</div><div class="line"></div><div class="line">    points.map((point, index) =&gt; &#123;</div><div class="line">        <span class="keyword">let</span> str = <span class="string">''</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 创建点集</span></div><div class="line">        CreateBezierPoints(point, pointCount).map((pos, idx) =&gt; &#123;</div><div class="line">            str += <span class="string">`<span class="subst">$&#123;idx&#125;</span>:(<span class="subst">$&#123;pos.x.toFixed(2)&#125;</span>, <span class="subst">$&#123;pos.y.toFixed(2)&#125;</span>),`</span>;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        content += <span class="string">`$paper<span class="subst">$&#123;index&#125;</span>: (<span class="subst">$&#123;str&#125;</span>);\n`</span>;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 写入文件</span></div><div class="line">    <span class="built_in">require</span>(<span class="string">'fs'</span>).writeFileSync(<span class="string">'./components/css/sass-variable.scss'</span>, content, &#123;</div><div class="line">        encoding: <span class="string">'utf8'</span></div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateBezierPoints</span>(<span class="params">anchorpoints, pointsAmount</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> points = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; pointsAmount; i++) &#123;</div><div class="line">        <span class="keyword">var</span> point = MultiPointBezier(anchorpoints, i / pointsAmount);</div><div class="line">        points.push(point);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> points;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MultiPointBezier</span>(<span class="params">points, t</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> len = points.length;</div><div class="line">    <span class="keyword">var</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> erxiangshi = <span class="function"><span class="keyword">function</span> (<span class="params">start, end</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> cs = <span class="number">1</span>, bcs = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (end &gt; <span class="number">0</span>) &#123;</div><div class="line">            cs *= start;</div><div class="line">            bcs *= end;</div><div class="line">            start--;</div><div class="line">            end--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (cs / bcs);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">var</span> point = points[i];</div><div class="line">        x += point.x * <span class="built_in">Math</span>.pow((<span class="number">1</span> - t), (len - <span class="number">1</span> - i)) * <span class="built_in">Math</span>.pow(t, i) * (erxiangshi(len - <span class="number">1</span>, i));</div><div class="line">        y += point.y * <span class="built_in">Math</span>.pow((<span class="number">1</span> - t), (len - <span class="number">1</span> - i)) * <span class="built_in">Math</span>.pow(t, i) * (erxiangshi(len - <span class="number">1</span>, i));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> &#123; x: x, y: y &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight scss"><table><tr><td class="code"><pre><div class="line"><span class="comment">// sass-variable.scss</span></div><div class="line"><span class="variable">$paper0</span>: (<span class="number">0</span>:(<span class="number">0.00</span>, <span class="number">0.00</span>),<span class="number">1</span>:(-<span class="number">2.33</span>, -<span class="number">3.16</span>),<span class="number">2</span>:(-<span class="number">4.55</span>, -<span class="number">5.46</span>),<span class="number">3</span>:(-<span class="number">6.67</span>, -<span class="number">6.92</span>),<span class="number">4</span>:(-<span class="number">8.73</span>, -<span class="number">7.57</span>),<span class="number">5</span>:(-<span class="number">10.76</span>, -<span class="number">7.43</span>),<span class="number">6</span>:(-<span class="number">12.78</span>, -<span class="number">6.53</span>),<span class="number">7</span>:(-<span class="number">14.81</span>, -<span class="number">4.90</span>),<span class="number">8</span>:(-<span class="number">16.89</span>, -<span class="number">2.55</span>),<span class="number">9</span>:(-<span class="number">19.03</span>, <span class="number">0.47</span>),<span class="number">10</span>:(-<span class="number">21.28</span>, <span class="number">4.16</span>),<span class="number">11</span>:(-<span class="number">23.65</span>, <span class="number">8.48</span>),<span class="number">12</span>:(-<span class="number">26.17</span>, <span class="number">13.41</span>),<span class="number">13</span>:(-<span class="number">28.87</span>, <span class="number">18.92</span>),<span class="number">14</span>:(-<span class="number">31.78</span>, <span class="number">24.99</span>),<span class="number">15</span>:(-<span class="number">34.92</span>, <span class="number">31.59</span>),<span class="number">16</span>:(-<span class="number">38.32</span>, <span class="number">38.70</span>),<span class="number">17</span>:(-<span class="number">42.00</span>, <span class="number">46.28</span>),<span class="number">18</span>:(-<span class="number">46.00</span>, <span class="number">54.33</span>),<span class="number">19</span>:(-<span class="number">50.34</span>, <span class="number">62.80</span>),<span class="number">20</span>:(-<span class="number">55.04</span>, <span class="number">71.68</span>),<span class="number">21</span>:(-<span class="number">60.14</span>, <span class="number">80.94</span>),<span class="number">22</span>:(-<span class="number">65.66</span>, <span class="number">90.55</span>),<span class="number">23</span>:(-<span class="number">71.62</span>, <span class="number">100.49</span>),<span class="number">24</span>:(-<span class="number">78.06</span>, <span class="number">110.73</span>),<span class="number">25</span>:(-<span class="number">85.00</span>, <span class="number">121.25</span>),<span class="number">26</span>:(-<span class="number">92.47</span>, <span class="number">132.02</span>),<span class="number">27</span>:(-<span class="number">100.49</span>, <span class="number">143.02</span>),<span class="number">28</span>:(-<span class="number">109.10</span>, <span class="number">154.22</span>),<span class="number">29</span>:(-<span class="number">118.31</span>, <span class="number">165.59</span>),<span class="number">30</span>:(-<span class="number">128.16</span>, <span class="number">177.12</span>),<span class="number">31</span>:(-<span class="number">138.67</span>, <span class="number">188.77</span>),<span class="number">32</span>:(-<span class="number">149.87</span>, <span class="number">200.52</span>),<span class="number">33</span>:(-<span class="number">161.79</span>, <span class="number">212.34</span>),<span class="number">34</span>:(-<span class="number">174.45</span>, <span class="number">224.22</span>),<span class="number">35</span>:(-<span class="number">187.88</span>, <span class="number">236.11</span>),<span class="number">36</span>:(-<span class="number">202.11</span>, <span class="number">248.00</span>),<span class="number">37</span>:(-<span class="number">217.16</span>, <span class="number">259.87</span>),<span class="number">38</span>:(-<span class="number">233.06</span>, <span class="number">271.68</span>),<span class="number">39</span>:(-<span class="number">249.84</span>, <span class="number">283.41</span>),<span class="number">40</span>:(-<span class="number">267.52</span>, <span class="number">295.04</span>),<span class="number">41</span>:(-<span class="number">286.13</span>, <span class="number">306.54</span>),<span class="number">42</span>:(-<span class="number">305.71</span>, <span class="number">317.88</span>),<span class="number">43</span>:(-<span class="number">326.26</span>, <span class="number">329.05</span>),<span class="number">44</span>:(-<span class="number">347.83</span>, <span class="number">340.00</span>),<span class="number">45</span>:(-<span class="number">370.44</span>, <span class="number">350.73</span>),<span class="number">46</span>:(-<span class="number">394.11</span>, <span class="number">361.20</span>),<span class="number">47</span>:(-<span class="number">418.88</span>, <span class="number">371.39</span>),<span class="number">48</span>:(-<span class="number">444.76</span>, <span class="number">381.27</span>),<span class="number">49</span>:(-<span class="number">471.80</span>, <span class="number">390.81</span>),);</div><div class="line"><span class="variable">$paper1</span>: (<span class="number">0</span>:(<span class="number">0.00</span>, <span class="number">0.00</span>),<span class="number">1</span>:(-<span class="number">2.17</span>, <span class="number">8.43</span>),<span class="number">2</span>:(-<span class="number">3.88</span>, <span class="number">16.92</span>),<span class="number">3</span>:(-<span class="number">5.18</span>, <span class="number">25.49</span>),<span class="number">4</span>:(-<span class="number">6.09</span>, <span class="number">34.15</span>),<span class="number">5</span>:(-<span class="number">6.64</span>, <span class="number">42.92</span>),<span class="number">6</span>:(-<span class="number">6.87</span>, <span class="number">51.82</span>),<span class="number">7</span>:(-<span class="number">6.80</span>, <span class="number">60.85</span>),<span class="number">8</span>:(-<span class="number">6.46</span>, <span class="number">70.05</span>),<span class="number">9</span>:(-<span class="number">5.89</span>, <span class="number">79.41</span>),<span class="number">10</span>:(-<span class="number">5.12</span>, <span class="number">88.96</span>),<span class="number">11</span>:(-<span class="number">4.17</span>, <span class="number">98.71</span>),<span class="number">12</span>:(-<span class="number">3.09</span>, <span class="number">108.68</span>),<span class="number">13</span>:(-<span class="number">1.89</span>, <span class="number">118.88</span>),<span class="number">14</span>:(-<span class="number">0.61</span>, <span class="number">129.33</span>),<span class="number">15</span>:(<span class="number">0.72</span>, <span class="number">140.04</span>),<span class="number">16</span>:(<span class="number">2.07</span>, <span class="number">151.03</span>),<span class="number">17</span>:(<span class="number">3.41</span>, <span class="number">162.31</span>),<span class="number">18</span>:(<span class="number">4.70</span>, <span class="number">173.91</span>),<span class="number">19</span>:(<span class="number">5.92</span>, <span class="number">185.82</span>),<span class="number">20</span>:(<span class="number">7.04</span>, <span class="number">198.08</span>),<span class="number">21</span>:(<span class="number">8.02</span>, <span class="number">210.69</span>),<span class="number">22</span>:(<span class="number">8.84</span>, <span class="number">223.67</span>),<span class="number">23</span>:(<span class="number">9.46</span>, <span class="number">237.04</span>),<span class="number">24</span>:(<span class="number">9.86</span>, <span class="number">250.81</span>),<span class="number">25</span>:(<span class="number">10.00</span>, <span class="number">265.00</span>),<span class="number">26</span>:(<span class="number">9.85</span>, <span class="number">279.62</span>),<span class="number">27</span>:(<span class="number">9.38</span>, <span class="number">294.68</span>),<span class="number">28</span>:(<span class="number">8.57</span>, <span class="number">310.21</span>),<span class="number">29</span>:(<span class="number">7.37</span>, <span class="number">326.22</span>),<span class="number">30</span>:(<span class="number">5.76</span>, <span class="number">342.72</span>),<span class="number">31</span>:(<span class="number">3.71</span>, <span class="number">359.73</span>),<span class="number">32</span>:(<span class="number">1.19</span>, <span class="number">377.26</span>),<span class="number">33</span>:(-<span class="number">1.84</span>, <span class="number">395.33</span>),<span class="number">34</span>:(-<span class="number">5.40</span>, <span class="number">413.96</span>),<span class="number">35</span>:(-<span class="number">9.52</span>, <span class="number">433.16</span>),<span class="number">36</span>:(-<span class="number">14.24</span>, <span class="number">452.94</span>),<span class="number">37</span>:(-<span class="number">19.58</span>, <span class="number">473.33</span>),<span class="number">38</span>:(-<span class="number">25.58</span>, <span class="number">494.33</span>),<span class="number">39</span>:(-<span class="number">32.27</span>, <span class="number">515.96</span>),<span class="number">40</span>:(-<span class="number">39.68</span>, <span class="number">538.24</span>),<span class="number">41</span>:(-<span class="number">47.84</span>, <span class="number">561.18</span>),<span class="number">42</span>:(-<span class="number">56.77</span>, <span class="number">584.80</span>),<span class="number">43</span>:(-<span class="number">66.52</span>, <span class="number">609.11</span>),<span class="number">44</span>:(-<span class="number">77.10</span>, <span class="number">634.14</span>),<span class="number">45</span>:(-<span class="number">88.56</span>, <span class="number">659.88</span>),<span class="number">46</span>:(-<span class="number">100.92</span>, <span class="number">686.36</span>),<span class="number">47</span>:(-<span class="number">114.21</span>, <span class="number">713.60</span>),<span class="number">48</span>:(-<span class="number">128.47</span>, <span class="number">741.61</span>),<span class="number">49</span>:(-<span class="number">143.72</span>, <span class="number">770.41</span>),);</div><div class="line"><span class="variable">$paper2</span>: (<span class="number">0</span>:(<span class="number">0.00</span>, <span class="number">0.00</span>),<span class="number">1</span>:(-<span class="number">6.05</span>, <span class="number">5.40</span>),<span class="number">2</span>:(-<span class="number">12.20</span>, <span class="number">10.80</span>),<span class="number">3</span>:(-<span class="number">18.45</span>, <span class="number">16.22</span>),<span class="number">4</span>:(-<span class="number">24.81</span>, <span class="number">21.64</span>),<span class="number">5</span>:(-<span class="number">31.28</span>, <span class="number">27.07</span>),<span class="number">6</span>:(-<span class="number">37.87</span>, <span class="number">32.52</span>),<span class="number">7</span>:(-<span class="number">44.57</span>, <span class="number">37.99</span>),<span class="number">8</span>:(-<span class="number">51.40</span>, <span class="number">43.49</span>),<span class="number">9</span>:(-<span class="number">58.35</span>, <span class="number">49.01</span>),<span class="number">10</span>:(-<span class="number">65.44</span>, <span class="number">54.56</span>),<span class="number">11</span>:(-<span class="number">72.66</span>, <span class="number">60.15</span>),<span class="number">12</span>:(-<span class="number">80.02</span>, <span class="number">65.77</span>),<span class="number">13</span>:(-<span class="number">87.52</span>, <span class="number">71.43</span>),<span class="number">14</span>:(-<span class="number">95.16</span>, <span class="number">77.14</span>),<span class="number">15</span>:(-<span class="number">102.96</span>, <span class="number">82.89</span>),<span class="number">16</span>:(-<span class="number">110.91</span>, <span class="number">88.69</span>),<span class="number">17</span>:(-<span class="number">119.02</span>, <span class="number">94.55</span>),<span class="number">18</span>:(-<span class="number">127.28</span>, <span class="number">100.47</span>),<span class="number">19</span>:(-<span class="number">135.72</span>, <span class="number">106.44</span>),<span class="number">20</span>:(-<span class="number">144.32</span>, <span class="number">112.48</span>),<span class="number">21</span>:(-<span class="number">153.10</span>, <span class="number">118.59</span>),<span class="number">22</span>:(-<span class="number">162.05</span>, <span class="number">124.76</span>),<span class="number">23</span>:(-<span class="number">171.18</span>, <span class="number">131.01</span>),<span class="number">24</span>:(-<span class="number">180.50</span>, <span class="number">137.34</span>),<span class="number">25</span>:(-<span class="number">190.00</span>, <span class="number">143.75</span>),<span class="number">26</span>:(-<span class="number">199.70</span>, <span class="number">150.24</span>),<span class="number">27</span>:(-<span class="number">209.59</span>, <span class="number">156.82</span>),<span class="number">28</span>:(-<span class="number">219.68</span>, <span class="number">163.49</span>),<span class="number">29</span>:(-<span class="number">229.98</span>, <span class="number">170.26</span>),<span class="number">30</span>:(-<span class="number">240.48</span>, <span class="number">177.12</span>),<span class="number">31</span>:(-<span class="number">251.19</span>, <span class="number">184.08</span>),<span class="number">32</span>:(-<span class="number">262.12</span>, <span class="number">191.15</span>),<span class="number">33</span>:(-<span class="number">273.27</span>, <span class="number">198.32</span>),<span class="number">34</span>:(-<span class="number">284.64</span>, <span class="number">205.61</span>),<span class="number">35</span>:(-<span class="number">296.24</span>, <span class="number">213.01</span>),<span class="number">36</span>:(-<span class="number">308.07</span>, <span class="number">220.53</span>),<span class="number">37</span>:(-<span class="number">320.13</span>, <span class="number">228.17</span>),<span class="number">38</span>:(-<span class="number">332.43</span>, <span class="number">235.93</span>),<span class="number">39</span>:(-<span class="number">344.97</span>, <span class="number">243.82</span>),<span class="number">40</span>:(-<span class="number">357.76</span>, <span class="number">251.84</span>),<span class="number">41</span>:(-<span class="number">370.80</span>, <span class="number">260.00</span>),<span class="number">42</span>:(-<span class="number">384.09</span>, <span class="number">268.29</span>),<span class="number">43</span>:(-<span class="number">397.64</span>, <span class="number">276.72</span>),<span class="number">44</span>:(-<span class="number">411.45</span>, <span class="number">285.30</span>),<span class="number">45</span>:(-<span class="number">425.52</span>, <span class="number">294.03</span>),<span class="number">46</span>:(-<span class="number">439.86</span>, <span class="number">302.91</span>),<span class="number">47</span>:(-<span class="number">454.48</span>, <span class="number">311.94</span>),<span class="number">48</span>:(-<span class="number">469.37</span>, <span class="number">321.13</span>),<span class="number">49</span>:(-<span class="number">484.54</span>, <span class="number">330.48</span>),);</div><div class="line"><span class="variable">$paper3</span>: (<span class="number">0</span>:(<span class="number">0.00</span>, <span class="number">0.00</span>),<span class="number">1</span>:(<span class="number">1.22</span>, <span class="number">9.56</span>),<span class="number">2</span>:(<span class="number">3.22</span>, <span class="number">19.03</span>),<span class="number">3</span>:(<span class="number">5.93</span>, <span class="number">28.45</span>),<span class="number">4</span>:(<span class="number">9.26</span>, <span class="number">37.83</span>),<span class="number">5</span>:(<span class="number">13.15</span>, <span class="number">47.18</span>),<span class="number">6</span>:(<span class="number">17.50</span>, <span class="number">56.53</span>),<span class="number">7</span>:(<span class="number">22.26</span>, <span class="number">65.88</span>),<span class="number">8</span>:(<span class="number">27.34</span>, <span class="number">75.26</span>),<span class="number">9</span>:(<span class="number">32.67</span>, <span class="number">84.68</span>),<span class="number">10</span>:(<span class="number">38.18</span>, <span class="number">94.14</span>),<span class="number">11</span>:(<span class="number">43.79</span>, <span class="number">103.68</span>),<span class="number">12</span>:(<span class="number">49.45</span>, <span class="number">113.29</span>),<span class="number">13</span>:(<span class="number">55.07</span>, <span class="number">122.99</span>),<span class="number">14</span>:(<span class="number">60.59</span>, <span class="number">132.79</span>),<span class="number">15</span>:(<span class="number">65.95</span>, <span class="number">142.70</span>),<span class="number">16</span>:(<span class="number">71.07</span>, <span class="number">152.74</span>),<span class="number">17</span>:(<span class="number">75.89</span>, <span class="number">162.91</span>),<span class="number">18</span>:(<span class="number">80.35</span>, <span class="number">173.22</span>),<span class="number">19</span>:(<span class="number">84.39</span>, <span class="number">183.68</span>),<span class="number">20</span>:(<span class="number">87.94</span>, <span class="number">194.30</span>),<span class="number">21</span>:(<span class="number">90.93</span>, <span class="number">205.09</span>),<span class="number">22</span>:(<span class="number">93.32</span>, <span class="number">216.04</span>),<span class="number">23</span>:(<span class="number">95.04</span>, <span class="number">227.18</span>),<span class="number">24</span>:(<span class="number">96.04</span>, <span class="number">238.50</span>),<span class="number">25</span>:(<span class="number">96.25</span>, <span class="number">250.00</span>),<span class="number">26</span>:(<span class="number">95.62</span>, <span class="number">261.70</span>),<span class="number">27</span>:(<span class="number">94.10</span>, <span class="number">273.59</span>),<span class="number">28</span>:(<span class="number">91.62</span>, <span class="number">285.68</span>),<span class="number">29</span>:(<span class="number">88.15</span>, <span class="number">297.97</span>),<span class="number">30</span>:(<span class="number">83.62</span>, <span class="number">310.46</span>),<span class="number">31</span>:(<span class="number">77.98</span>, <span class="number">323.16</span>),<span class="number">32</span>:(<span class="number">71.19</span>, <span class="number">336.06</span>),<span class="number">33</span>:(<span class="number">63.19</span>, <span class="number">349.17</span>),<span class="number">34</span>:(<span class="number">53.94</span>, <span class="number">362.47</span>),<span class="number">35</span>:(<span class="number">43.39</span>, <span class="number">375.98</span>),<span class="number">36</span>:(<span class="number">31.49</span>, <span class="number">389.69</span>),<span class="number">37</span>:(<span class="number">18.20</span>, <span class="number">403.60</span>),<span class="number">38</span>:(<span class="number">3.47</span>, <span class="number">417.70</span>),<span class="number">39</span>:(-<span class="number">12.74</span>, <span class="number">431.99</span>),<span class="number">40</span>:(-<span class="number">30.46</span>, <span class="number">446.46</span>),<span class="number">41</span>:(-<span class="number">49.75</span>, <span class="number">461.12</span>),<span class="number">42</span>:(-<span class="number">70.65</span>, <span class="number">475.95</span>),<span class="number">43</span>:(-<span class="number">93.18</span>, <span class="number">490.95</span>),<span class="number">44</span>:(-<span class="number">117.40</span>, <span class="number">506.11</span>),<span class="number">45</span>:(-<span class="number">143.33</span>, <span class="number">521.42</span>),<span class="number">46</span>:(-<span class="number">171.02</span>, <span class="number">536.88</span>),<span class="number">47</span>:(-<span class="number">200.50</span>, <span class="number">552.48</span>),<span class="number">48</span>:(-<span class="number">231.80</span>, <span class="number">568.21</span>),<span class="number">49</span>:(-<span class="number">264.95</span>, <span class="number">584.05</span>),);</div></pre></td></tr></table></figure>
<p>相关的 mixin 如下</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> fly(<span class="variable">$animation_name</span>, <span class="variable">$pos</span>) &#123;</div><div class="line">    <span class="attribute">animation</span>: <span class="variable">$animation_name</span> <span class="number">2.5s</span> <span class="number">5s</span> forwards;</div><div class="line"></div><div class="line">    @keyframes #&#123;<span class="variable">$animation_name</span>&#125; &#123;</div><div class="line">        @<span class="keyword">each</span> <span class="variable">$time</span>, <span class="variable">$translate</span> in <span class="variable">$pos</span> &#123;</div><div class="line">            #&#123;(<span class="variable">$time</span> + 1)*2%&#125; &#123;</div><div class="line">                <span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">                <span class="attribute">transform</span>: translate(rem(nth(<span class="variable">$translate</span>, <span class="number">1</span>)), rem(nth(<span class="variable">$translate</span>, <span class="number">2</span>)));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">...</div><div class="line">&amp;<span class="selector-class">.play</span> <span class="selector-class">.paper</span> <span class="selector-tag">i</span> &#123;</div><div class="line">    &amp;:nth-child(1) &#123;</div><div class="line">        @<span class="keyword">include</span> fly(ani-paper-<span class="number">0</span>, <span class="variable">$paper0</span>);</div><div class="line">    &#125;</div><div class="line">    &amp;:nth-child(2) &#123;</div><div class="line">        @<span class="keyword">include</span> fly(ani-paper-<span class="number">1</span>, <span class="variable">$paper1</span>);</div><div class="line">    &#125;</div><div class="line">    &amp;:nth-child(3) &#123;</div><div class="line">        @<span class="keyword">include</span> fly(ani-paper-<span class="number">2</span>, <span class="variable">$paper2</span>);</div><div class="line">    &#125;</div><div class="line">    &amp;:nth-child(4) &#123;</div><div class="line">        @<span class="keyword">include</span> fly(ani-paper-<span class="number">3</span>, <span class="variable">$paper3</span>);</div><div class="line">    &#125;</div><div class="line">    &amp;:nth-child(5) &#123;</div><div class="line">        @<span class="keyword">include</span> fly(ani-paper-<span class="number">4</span>, <span class="variable">$paper4</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="动画缩写"><a href="#动画缩写" class="headerlink" title="动画缩写"></a>动画缩写</h2><p>还写了个简单的 mixin, 用来写简单状态变化的动画，代码很简单就不继续巴拉了。<s>（感觉自己写 mixin 写上瘾了噗）</s></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> animation (<span class="variable">$animation_name</span>, <span class="variable">$duration</span>, <span class="variable">$delay</span>: 0.5s, <span class="variable">$bezier</span>: linear, <span class="variable">$times</span>: infinite, <span class="variable">$from</span>: (), <span class="variable">$middle</span>: null, <span class="variable">$to</span>: ()) &#123;</div><div class="line"></div><div class="line">    <span class="attribute">animation</span>: <span class="variable">$animation_name</span> <span class="variable">$duration</span> <span class="variable">$delay</span> <span class="variable">$bezier</span> <span class="variable">$times</span>;</div><div class="line"></div><div class="line">    @<span class="keyword">include</span> keyframes (<span class="variable">$animation_name</span>) &#123;</div><div class="line">        0% &#123;</div><div class="line">            @<span class="keyword">each</span> <span class="variable">$style</span>, <span class="variable">$val</span> in <span class="variable">$from</span> &#123;</div><div class="line">                #&#123;<span class="variable">$style</span>&#125;: <span class="variable">$val</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        @<span class="keyword">if</span>(<span class="variable">$middle</span> != null) &#123;</div><div class="line">            50% &#123;</div><div class="line">                @<span class="keyword">each</span> <span class="variable">$style</span>, <span class="variable">$val</span> in <span class="variable">$middle</span> &#123;</div><div class="line">                    #&#123;<span class="variable">$style</span>&#125;: <span class="variable">$val</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        @<span class="keyword">if</span>(<span class="variable">$to</span> != null) &#123;</div><div class="line">            100% &#123;</div><div class="line">                @<span class="keyword">each</span> <span class="variable">$style</span>, <span class="variable">$val</span> in <span class="variable">$to</span> &#123;</div><div class="line">                    #&#123;<span class="variable">$style</span>&#125;: <span class="variable">$val</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>很遗憾之前没有开窍把这些特性用到项目中，仔细想想应该也是项目这么多动画需要才有了这些尝试。对于以往一些小需求来说，也就是杀鸡用不到屠龙宝刀这个意思吧~但其实用屠龙宝刀杀鸡也会很舒服的说，我现在是这样觉得的。</p>
<p><s>虽然上面的东西都是用的 Sass, 还是喜欢 Stylus 多一点的感觉🙊</s></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前也在用 Sass 和 Stylus，不过局限在嵌套、变量之类的简单使用，对其他特性敬而远之，觉得在写样式的过程中过多去考虑这一块会降低页面重构效率。直到最近项目中出现了大量 css 动画，一想到要重复调整关键帧和统一多个元素的入场动画太麻烦啦，于是决定试试 mixin，然后发现效率提高了不止一丢丢这么厉害。&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://cupools.github.io/tags/css/"/>
    
      <category term="sass" scheme="http://cupools.github.io/tags/sass/"/>
    
  </entry>
  
  <entry>
    <title>星座测试的杂货</title>
    <link href="http://cupools.github.io/2016/01050/"/>
    <id>http://cupools.github.io/2016/01050/</id>
    <published>2016-01-05T02:18:00.000Z</published>
    <updated>2016-08-26T07:52:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>从接触 WebGL，到入门 three.js，到各种修修改改，到活动上线，前后耗费了14个工作日。而后耗时3天又上了一个版本，整个十二月也就过去了。如果以后项目中没有用到这货估计也不会再接触了吧，安心搞自己乱七八糟的东西比较开心，写点东西纪念一下咯。</p>
<a id="more"></a>
<h2 id="WebGL-是什么"><a href="#WebGL-是什么" class="headerlink" title="WebGL 是什么"></a>WebGL 是什么</h2><p>WebGL 是一种 3D 绘图标准，允许把 JavaScript 和 OpenGL ES 2.0 结合在一起，为 Canvas 提供硬件3D加速渲染。一句话概括，通过 WebGL，可以在页端展示3D场景</p>
<h2 id="three-js-是什么"><a href="#three-js-是什么" class="headerlink" title="three.js 是什么"></a>three.js 是什么</h2><p>three.js 是一个基于 Javascript 能够简化 WebGL 开发的库。通过 three.js 可以极大地提高开发效率，同时降低了开发门槛，就算不熟悉图形学也可以通过 three.js 愉快地玩耍了</p>
<h2 id="如何愉快地玩耍"><a href="#如何愉快地玩耍" class="headerlink" title="如何愉快地玩耍"></a>如何愉快地玩耍</h2><p>暂时忘记 WebGL 那些复杂的概念，基于 three.js，直接抛个简单的示例 <a href="http://jsbin.com/yuselimate/1/edit?js,output" target="_blank" rel="external">jsbin</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 创建场景</span></div><div class="line">scene = <span class="keyword">new</span> THREE.Scene();</div><div class="line"></div><div class="line"><span class="comment">// 创建相机</span></div><div class="line">camera = <span class="keyword">new</span> THREE.PerspectiveCamera(<span class="number">75</span>, <span class="built_in">window</span>.innerWidth / <span class="built_in">window</span>.innerHeight, <span class="number">1</span>, <span class="number">10000</span>);</div><div class="line">camera.position.z = <span class="number">1000</span>;</div><div class="line"></div><div class="line"><span class="comment">// 创建模型</span></div><div class="line">geometry = <span class="keyword">new</span> THREE.BoxGeometry(<span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>);</div><div class="line">material = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123;</div><div class="line">    color: <span class="number">0x66ccff</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">mesh = <span class="keyword">new</span> THREE.Mesh(geometry, material);</div><div class="line">scene.add(mesh);</div><div class="line"></div><div class="line"><span class="comment">// 创建灯光</span></div><div class="line">light = <span class="keyword">new</span> THREE.DirectionalLight(<span class="number">0xffffff</span>, <span class="number">0.8</span>);</div><div class="line">light.position.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>);</div><div class="line">scene.add(light);</div><div class="line"></div><div class="line"><span class="comment">// 创建渲染器</span></div><div class="line">renderer = <span class="keyword">new</span> THREE.WebGLRenderer(&#123;</div><div class="line">    antialias: <span class="literal">true</span></div><div class="line">&#125;);</div><div class="line">renderer.setSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight);</div><div class="line">renderer.setClearColor(<span class="number">0x333333</span>);</div><div class="line"></div><div class="line"><span class="built_in">document</span>.body.appendChild(renderer.domElement);</div></pre></td></tr></table></figure>
<p>代码不多，可以看到的东西是创建了一个立方体，添加了光照，还有阴影。简单粗暴的文档如下，直接看文档方便一些</p>
<ul>
<li><a href="http://threejs.org/docs/#Reference/Scenes/Scene" target="_blank" rel="external">场景</a></li>
<li><a href="http://threejs.org/docs/#Reference/Cameras/PerspectiveCamera" target="_blank" rel="external">相机</a></li>
<li><a href="http://threejs.org/docs/#Reference/Lights/DirectionalLight" target="_blank" rel="external">灯光</a></li>
<li><a href="http://threejs.org/docs/#Reference/Renderers/WebGLRenderer" target="_blank" rel="external">渲染器</a></li>
</ul>
<p>然后单独说一下模型，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">geometry = <span class="keyword">new</span> THREE.BoxGeometry(<span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>);</div><div class="line">material = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123;</div><div class="line">    color: <span class="number">0x66ccff</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">mesh = <span class="keyword">new</span> THREE.Mesh(geometry, material);</div><div class="line">scene.add(mesh);</div></pre></td></tr></table></figure>
<p><code>geometry</code> 即几何结构，包含了能够描述物体的三维模型的所有数据，具体到所有顶点坐标。这里使用的是 <a href="http://threejs.org/docs/#Reference/Extras.Geometries/BoxGeometry" target="_blank" rel="external">BoxGeometry</a>，并提供了长宽高三个参数，three.js 会将其转换为顶点信息并提供给着色器，可在 <code>geometry.vertices</code> 看到</p>
<p><code>material</code> 即材料，描述了物体的外表，具体到颜色、贴图、对光线的反射效果等。这里使用的是 <a href="http://threejs.org/docs/#Reference/Materials/MeshLambertMaterial" target="_blank" rel="external">MeshLambertMaterial</a>，即兰伯特材质，表面能对光线产生均匀散射，继承自 <a href="http://threejs.org/docs/#Reference/Materials/Material" target="_blank" rel="external">Material</a>，并提供了 <code>color</code> 参数。其他还可以提供纹理、透明度、叠加效果等参数，这里不具体巴拉</p>
<p><code>mesh</code> 即网格模型，糅合了几何机构和材料在一起。将模型添加到已经创建的场景 <code>scene</code> 里面，摆好相机位置，渲染器 <code>renderer</code> 渲染场景，则可以在画布中看到添加的物体了。可以修改网格模型的坐标 <code>position</code>、旋转 <code>rotation</code> 等参数</p>
<p>以上，其他有什么想法可以直接到<a href="http://threejs.org/examples/#webgl_camera" target="_blank" rel="external">官网</a>找示例看源码如何实现。官方文档有部分对象没有提到，谷歌就是了。</p>
<h2 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h2><p>一张图片就够了吧，右手坐标系</p>
<p><img src="/images/constellation/coordinates.png" alt="coordinates"></p>
<h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="1-移动端画面模糊，锯齿严重"><a href="#1-移动端画面模糊，锯齿严重" class="headerlink" title="1. 移动端画面模糊，锯齿严重"></a>1. 移动端画面模糊，锯齿严重</h3><p><img src="/images/constellation/view.png" alt="view"></p>
<p>移动端画面模糊，锯齿严重。跟着示例源码加了这样一句，发现没用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">renderer.setPixelRatio(<span class="built_in">window</span>.devicePixelRatio);</div></pre></td></tr></table></figure>
<p>继续查资料发现是 <code>viewport</code> 的问题。做这样的修改可以保证 Android 和 iOS 下显示清晰</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=0.5,maximum-scale=0.5,minimum-scale=0.5,user-scalable=no"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>然后在锤子手机上又发现 viewport 出了问题，于是又做了这种奇怪的修改，保证了锤子手机能正确渲染。具体关于 viewport 之后再整理一下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1,maximum-scale=0.5,minimum-scale=0.5,user-scalable=no"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="2-着色器控制"><a href="#2-着色器控制" class="headerlink" title="2. 着色器控制"></a>2. 着色器控制</h3><p><img src="/images/constellation/shader-bad.png" alt="view-bad"></p>
<p>发现闪烁的贴图周期性出现左图的情况，然后定位到自己写的着色器，有这部分代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">attribute float size;</div><div class="line">attribute float idx; <span class="comment">// 星星下标</span></div><div class="line">uniform float timeline; <span class="comment">// 时间轴，实现闪烁效果</span></div><div class="line">...</div><div class="line">void main() &#123;</div><div class="line">    ...</div><div class="line">    if(length(mvPosition.xyz) &lt; <span class="number">400.0</span>) &#123;</div><div class="line">        enlarge = (sin(timeline - idx) * <span class="number">40.0</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        enlarge = (sin(timeline - idx) * <span class="number">10.0</span>);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    gl_Position = projectionMatrix * mvPosition;</div><div class="line">    gl_PointSize = <span class="number">1500.0</span> / length(mvPosition.xyz) * size + enlarge;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在计算中，<code>enlarge</code> 可能是负值，导致最终计算的 <code>gl_PointSize</code> 也可能是负值，然后导致了以上问题。加个判断修正就可以啦</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span>(enlarge &lt; <span class="number">0.1</span>) &#123;</div><div class="line">    enlarge = <span class="number">.0</span> - enlarge + <span class="number">1.0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-兼容问题"><a href="#3-兼容问题" class="headerlink" title="3. 兼容问题"></a>3. 兼容问题</h3><p>第一次尝试 WebGL，用身边有限的测试机子跑了一遍感觉兼容性出乎意料的好，为了兼容到旧的 Android 手机，这里使用 three.js r71 版本。可是在项目临近上线前发现兼容问题远比预想的严重。从线上返回的数据看，有接近三分之一的用户手机或浏览器因为不支持 WebGL 或者对其兼容有问题，而访问到降级页面。如果有打算将 WebGL 运用到项目里的话，需要在一开始关注如何平稳退化</p>
<h2 id="压缩构建-three-js"><a href="#压缩构建-three-js" class="headerlink" title="压缩构建 three.js"></a>压缩构建 three.js</h2><p>想在移动端上面使用 three.js 的话，重新构建打包剔除不必要的代码是必须的。在 github 上的源码也提供了重新构建的方法，各个平台都考虑到了的样子，然后使用 node 构建的话主要参数如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// /utils/build/build.js</span></div><div class="line">···</div><div class="line"><span class="keyword">var</span> parser = <span class="keyword">new</span> argparse.ArgumentParser();</div><div class="line">parser.addArgument( [<span class="string">'--include'</span>], &#123; action: <span class="string">'append'</span>, required: <span class="literal">true</span> &#125; );</div><div class="line">parser.addArgument( [<span class="string">'--externs'</span>], &#123; action: <span class="string">'append'</span>, defaultValue: [<span class="string">'./externs/common.js'</span>] &#125; );</div><div class="line">parser.addArgument( [<span class="string">'--amd'</span>], &#123; action: <span class="string">'storeTrue'</span>, defaultValue: <span class="literal">false</span> &#125; );</div><div class="line">parser.addArgument( [<span class="string">'--minify'</span>], &#123; action: <span class="string">'storeTrue'</span>, defaultValue: <span class="literal">false</span> &#125; );</div><div class="line">parser.addArgument( [<span class="string">'--output'</span>], &#123; defaultValue: <span class="string">'../../build/three.js'</span> &#125; );</div><div class="line">parser.addArgument( [<span class="string">'--sourcemaps'</span>], &#123; action: <span class="string">'storeTrue'</span>, defaultValue: <span class="literal">true</span> &#125; );</div><div class="line">···</div></pre></td></tr></table></figure>
<p>可以根据需要调整 <code>utils/build/includes</code> 中的文件列表，减少打包的文件，然后重新构建就可以了。<code>common</code> 中，可以剔除的文件大概有没用到的 <code>light</code>，<code>loaders</code>，还有 <code>shaders</code> 的部分文件，其他经常会报错，然后 <code>extras</code> 就直接保留使用到的功能就行了，根据项目实际需要吧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">node build.js --include common --include extras --amd --minify</div></pre></td></tr></table></figure>
<h2 id="几何函数"><a href="#几何函数" class="headerlink" title="几何函数"></a>几何函数</h2><p>简单的速度曲线变化用几何函数去处理路线就可以了，当然处理的结果有时会比较生硬，可以去 <a href="http://www.createjs.com/demos/tweenjs/tween_sparktable" target="_blank" rel="external">tween.js</a> 扒一些东西下来。这里列几个简单的几何函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">EasingFunctions = &#123;</div><div class="line">  linear: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123; <span class="keyword">return</span> t &#125;,</div><div class="line">  easeInQuad: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123; <span class="keyword">return</span> t*t &#125;,</div><div class="line">  easeOutQuad: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123; <span class="keyword">return</span> t*(<span class="number">2</span>-t) &#125;,</div><div class="line">  easeInOutQuad: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123; <span class="keyword">return</span> t&lt;<span class="number">.5</span> ? <span class="number">2</span>*t*t : <span class="number">-1</span>+(<span class="number">4</span><span class="number">-2</span>*t)*t &#125;,</div><div class="line">  easeInCubic: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123; <span class="keyword">return</span> t*t*t &#125;,</div><div class="line">  easeOutCubic: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123; <span class="keyword">return</span> (--t)*t*t+<span class="number">1</span> &#125;,</div><div class="line">  easeInOutCubic: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123; <span class="keyword">return</span> t&lt;<span class="number">.5</span> ? <span class="number">4</span>*t*t*t : (t<span class="number">-1</span>)*(<span class="number">2</span>*t<span class="number">-2</span>)*(<span class="number">2</span>*t<span class="number">-2</span>)+<span class="number">1</span> &#125;,</div><div class="line">  easeInQuart: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123; <span class="keyword">return</span> t*t*t*t &#125;,</div><div class="line">  easeOutQuart: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123; <span class="keyword">return</span> <span class="number">1</span>-(--t)*t*t*t &#125;,</div><div class="line">  easeInOutQuart: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123; <span class="keyword">return</span> t&lt;<span class="number">.5</span> ? <span class="number">8</span>*t*t*t*t : <span class="number">1</span><span class="number">-8</span>*(--t)*t*t*t &#125;,</div><div class="line">  easeInQuint: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123; <span class="keyword">return</span> t*t*t*t*t &#125;,</div><div class="line">  easeOutQuint: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123; <span class="keyword">return</span> <span class="number">1</span>+(--t)*t*t*t*t &#125;,</div><div class="line">  easeInOutQuint: <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123; <span class="keyword">return</span> t&lt;<span class="number">.5</span> ? <span class="number">16</span>*t*t*t*t*t : <span class="number">1</span>+<span class="number">16</span>*(--t)*t*t*t*t &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>学习过程中帮助很大的一些网站，大大的感谢~</p>
<p><a href="http://webglfundamentals.org/" target="_blank" rel="external">http://webglfundamentals.org/</a><br><a href="http://www.cnblogs.com/yiyezhai/category/446753.html" target="_blank" rel="external">http://www.cnblogs.com/yiyezhai/category/446753.html</a><br><a href="http://wiki.jikexueyuan.com/project/webgl/" target="_blank" rel="external">http://wiki.jikexueyuan.com/project/webgl/</a><br><a href="https://oncemore2020.github.io/blog/homogeneous/" target="_blank" rel="external">https://oncemore2020.github.io/blog/homogeneous/</a><br><a href="http://csgrandeur.github.io/WebGL_Learn_Code/Application/WebGL_Tutorial/index.html" target="_blank" rel="external">http://csgrandeur.github.io/</a><br><a href="http://threejs.org/" target="_blank" rel="external">http://threejs.org/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从接触 WebGL，到入门 three.js，到各种修修改改，到活动上线，前后耗费了14个工作日。而后耗时3天又上了一个版本，整个十二月也就过去了。如果以后项目中没有用到这货估计也不会再接触了吧，安心搞自己乱七八糟的东西比较开心，写点东西纪念一下咯。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://cupools.github.io/tags/JavaScript/"/>
    
      <category term="three.js" scheme="http://cupools.github.io/tags/three-js/"/>
    
  </entry>
  
  <entry>
    <title>准备干 three.js</title>
    <link href="http://cupools.github.io/2016/01020/"/>
    <id>http://cupools.github.io/2016/01020/</id>
    <published>2016-01-02T06:38:00.000Z</published>
    <updated>2016-08-26T07:54:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单搬运和记录一下入门 three.js 之前做的一些准备好了，毕竟前后花了几天时间在熟悉这部分内容，包括图形学的一些基础概念。尽管使用 three.js 开发的时候这部分内容对于开发者又几乎是透明的，都是概念的东西_(:з」∠)_</p>
<a id="more"></a>
<h2 id="齐次坐标"><a href="#齐次坐标" class="headerlink" title="齐次坐标"></a>齐次坐标</h2><blockquote>
<p>齐次坐标表示是计算机图形学的重要手段之一，它既能够用来明确区分向量和点，同时也更易用于进行仿射（线性）几何变换</p>
</blockquote>
<p>齐次坐标采用 N+1 个量来表示 N 维坐标，例如将一个二维点(x,y)表示为(X,Y,w)，三维点(x,y,z)表示为(X,Y,Z,w)。有如下两个优点：</p>
<h3 id="1-区分向量和点"><a href="#1-区分向量和点" class="headerlink" title="1. 区分向量和点"></a>1. 区分向量和点</h3><p>在坐标系xOy中,用(a,b)定义一个向量 \(\vec v\) 时，表示 \(\vec v = a\vec x + b\vec y\)；用(a,b)定义一个点 p 时，表示 \(p - o = a\vec x + b\vec y\)。这种情况下，无法区分向量和点，而引入齐次坐标则很好地解决了这个问题</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>普通表示</th>
<th>齐次坐标表示</th>
</tr>
</thead>
<tbody>
<tr>
<td>向量 \(\vec v\)</td>
<td>\(\vec v = a\vec x + b\vec y\)</td>
<td>\( p = {\begin{bmatrix} a &amp; b &amp; 0 \end{bmatrix}} {\begin{bmatrix} \vec x \\ \vec y \\ o \end{bmatrix}} \)</td>
</tr>
<tr>
<td>点 p</td>
<td>\(p - o = a\vec x + b\vec y\)</td>
<td>\( p = {\begin{bmatrix} a &amp; b &amp; 1 \end{bmatrix}} {\begin{bmatrix} \vec x \\ \vec y \\ o \end{bmatrix}} \)</td>
</tr>
</tbody>
</table>
<h3 id="2-易于进行几何变换"><a href="#2-易于进行几何变换" class="headerlink" title="2. 易于进行几何变换"></a>2. 易于进行几何变换</h3><p>之所以说齐次坐标能易于几何变换，是因为它能把线性变换和平移变换的运算用矩阵相乘的形式来计算。此外，模型矩阵的使用也降低了重复计算量。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>普通表示</th>
<th>齐次坐标表示</th>
</tr>
</thead>
<tbody>
<tr>
<td>缩放变换</td>
<td>\({\begin{bmatrix} x̀ \\ ỳ \end{bmatrix}} = {\begin{bmatrix} S_x &amp; 0 \\ 0 &amp; S_y \end{bmatrix}} {\begin{bmatrix} x \\ y \end{bmatrix}}\)</td>
<td>\({\begin{bmatrix} x̀ \\ ỳ \\ 1 \end{bmatrix}} = {\begin{bmatrix} S_x &amp; 0 &amp; 0 \\ 0 &amp; S_y &amp; 0 \\ 0 &amp; 0 &amp; 1\end{bmatrix}} {\begin{bmatrix} x \\ y \\ 1 \end{bmatrix}}\)</td>
</tr>
<tr>
<td>平移变换</td>
<td>\({\begin{bmatrix} x̀ \\ ỳ \end{bmatrix}} =  {\begin{bmatrix} t_x \\ t_y \end{bmatrix}} + {\begin{bmatrix} x \\ y \end{bmatrix}}\)</td>
<td>\({\begin{bmatrix} x̀ \\ ỳ \\ 1 \end{bmatrix}} = {\begin{bmatrix} 1 &amp; 0 &amp; t_x \\ 0 &amp; 1 &amp; t_y \\ 0 &amp; 0 &amp; 1 \end{bmatrix}}{\begin{bmatrix} x \\ y \\ 1 \end{bmatrix}}  \)</td>
</tr>
</tbody>
</table>
<h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><p>大学上高数肯定有接触到矩阵啦，这里要提的是下面几个概念。</p>
<h3 id="模型矩阵"><a href="#模型矩阵" class="headerlink" title="模型矩阵"></a>模型矩阵</h3><p>将最初的点坐标左乘这个矩阵就能得到一系列变换后最终的点坐标，这个矩阵称为“模型矩阵”</p>
<h3 id="视图矩阵"><a href="#视图矩阵" class="headerlink" title="视图矩阵"></a>视图矩阵</h3><p>将世界里的所有模型看作一个大模型，在所有模型矩阵的左侧再乘以一个表示整个世界变换的模型矩阵，这个表示整个世界变换的矩阵又称为“视图矩阵”</p>
<h3 id="模型视图矩阵"><a href="#模型视图矩阵" class="headerlink" title="模型视图矩阵"></a>模型视图矩阵</h3><p>视图矩阵乘以模型矩阵得到的矩阵称为“模型视图矩阵”</p>
<h2 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h2><p>不得不佩服<a href="http://www.cnblogs.com/yiyezhai/archive/2012/09/12/2677902.html" target="_blank" rel="external">一叶斋</a>这几篇文章的介绍，我就不搬运了</p>
<h3 id="正射投影"><a href="#正射投影" class="headerlink" title="正射投影"></a>正射投影</h3><p><img src="/images/constellation/orthographic-camera.png" alt="正射投影"></p>
<h3 id="透视投影"><a href="#透视投影" class="headerlink" title="透视投影"></a>透视投影</h3><p><img src="/images/constellation/perspective-camera.png" alt="透视投影"></p>
<h2 id="Shaders-and-GLSL"><a href="#Shaders-and-GLSL" class="headerlink" title="Shaders and GLSL"></a>Shaders and GLSL</h2><h3 id="Shader"><a href="#Shader" class="headerlink" title="Shader"></a>Shader</h3><p>Shader 即着色器。每次通过 WebGL 绘制一个物体的时候，都会需要两个着色器，顶点着色器和片元着色器。每一个着色器是一个函数，一个着色程序则同时包括了顶点着色器和片元着色器，而一个 WebGL 渲染出来的场景通常需要多个着色程序。更为具体的介绍<a href="http://www.cnblogs.com/yiyezhai/archive/2012/09/21/2697461.html" target="_blank" rel="external">请务必戳这里</a>或者<a href="http://webglfundamentals.org/webgl/lessons/webgl-shaders-and-glsl.html" target="_blank" rel="external">这里</a>，对我帮助很大。</p>
<p><img src="/images/constellation/shader.png" alt="着色器"></p>
<h2 id="Vertex-Shader-顶点着色器"><a href="#Vertex-Shader-顶点着色器" class="headerlink" title="Vertex Shader (顶点着色器)"></a>Vertex Shader (顶点着色器)</h2><p>主要处理每个顶点的坐标信息</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"x-shader/x-vertex"</span> <span class="attr">id</span>=<span class="string">"vertex-shader"</span>&gt;</span><span class="javascript"></span></div><div class="line">    attribute float size;</div><div class="line">    uniform vec3 color;</div><div class="line"></div><div class="line">    varying vec4 vColor;</div><div class="line"></div><div class="line">    <span class="keyword">void</span> main() &#123;</div><div class="line">        vec4 mvPosition = modelViewMatrix * vec4(position, <span class="number">1.0</span>);</div><div class="line"></div><div class="line">        float alpha = <span class="number">1.0</span>;</div><div class="line">        vColor = vec4(color, alpha);</div><div class="line"></div><div class="line">        gl_Position = projectionMatrix * mvPosition;</div><div class="line">        gl_PointSize = size;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可以看到除了数据类型 <code>float</code>, <code>vec3</code>，变量前面的 <code>attribute</code>, <code>uniform</code> 则表示变量是如何传递到着色器。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>attribute</td>
<td>由缓冲区输入数据</td>
</tr>
<tr>
<td>uniform</td>
<td>在所有顶点处理过程中保持一致</td>
</tr>
<tr>
<td>varying</td>
<td>从顶点着色器经过光栅化后传递给片元着色器</td>
</tr>
</tbody>
</table>
<h2 id="Fragment-Shader-片元着色器"><a href="#Fragment-Shader-片元着色器" class="headerlink" title="Fragment Shader (片元着色器)"></a>Fragment Shader (片元着色器)</h2><p>提供每一个像素的颜色信息</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"x-shader/x-fragment"</span> <span class="attr">id</span>=<span class="string">"fragment-shader"</span>&gt;</span><span class="javascript"></span></div><div class="line">    uniform sampler2D texture;</div><div class="line">    varying vec4 vColor;</div><div class="line"></div><div class="line">    <span class="keyword">void</span> main() &#123;</div><div class="line">        gl_FragColor = vColor * texture2D(texture, gl_PointCoord);</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>类型</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>uniform</td>
<td>在所有像素处理过程中保持一致的值</td>
</tr>
<tr>
<td>varying</td>
<td>从顶点着色器经过光栅化后传递到片元着色器</td>
</tr>
</tbody>
</table>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>内容也差不多是这些了，下面才是干货…</p>
<p><a href="http://webglfundamentals.org/" target="_blank" rel="external">http://webglfundamentals.org/</a><br><a href="http://www.cnblogs.com/yiyezhai/category/446753.html" target="_blank" rel="external">http://www.cnblogs.com/yiyezhai/category/446753.html</a><br><a href="http://wiki.jikexueyuan.com/project/webgl/" target="_blank" rel="external">http://wiki.jikexueyuan.com/project/webgl/</a><br><a href="https://oncemore2020.github.io/blog/homogeneous/" target="_blank" rel="external">https://oncemore2020.github.io/blog/homogeneous/</a><br><a href="http://csgrandeur.github.io/WebGL_Learn_Code/Application/WebGL_Tutorial/index.html" target="_blank" rel="external">http://csgrandeur.github.io/</a><br><a href="http://threejs.org/" target="_blank" rel="external">http://threejs.org/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单搬运和记录一下入门 three.js 之前做的一些准备好了，毕竟前后花了几天时间在熟悉这部分内容，包括图形学的一些基础概念。尽管使用 three.js 开发的时候这部分内容对于开发者又几乎是透明的，都是概念的东西_(:з」∠)_&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://cupools.github.io/tags/JavaScript/"/>
    
      <category term="three.js" scheme="http://cupools.github.io/tags/three-js/"/>
    
  </entry>
  
  <entry>
    <title>读 observerjs</title>
    <link href="http://cupools.github.io/2015/102821/"/>
    <id>http://cupools.github.io/2015/102821/</id>
    <published>2015-10-27T16:00:00.000Z</published>
    <updated>2016-08-17T14:14:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>只有158行代码的 <a href="https://github.com/kmdjs/observejs" target="_blank" rel="external">observerjs</a> 确实很吸引人，奔着如何观察复杂对象和数组的变化的目的啃了一遍源码，确实有收获</p>
<p>直接贴加了注释的源码~~</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* observejs --- By dnt http://kmdjs.github.io/</span></div><div class="line"> * Github: https://github.com/kmdjs/observejs</div><div class="line"> * MIT Licensed.</div><div class="line"> */</div><div class="line">;</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">win</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> observe = <span class="function"><span class="keyword">function</span>(<span class="params">target, arr, callback</span>) </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 构造函数</div><div class="line">         * @param target 观察的对象</div><div class="line">         * @param arr 观察的属性</div><div class="line">         * @param callback 属性变化时触发的回调函数</div><div class="line">         */</div><div class="line">        <span class="keyword">var</span> _observe = <span class="function"><span class="keyword">function</span>(<span class="params">target, arr, callback</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (!target.$observer) &#123;</div><div class="line">                target.$observer = <span class="keyword">this</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">var</span> $observer = target.$observer;</div><div class="line">            <span class="keyword">var</span> eventPropArr = [];	<span class="comment">// 保存 target 中需要观察的属性</span></div><div class="line">            <span class="keyword">if</span> (observe.isArray(target)) &#123;</div><div class="line">                <span class="keyword">if</span> (target.length === <span class="number">0</span>) &#123;</div><div class="line">                    target.$observeProps = &#123;&#125;;	<span class="comment">// 用于储存 target 的路径和各个属性的值</span></div><div class="line">                    target.$observeProps.$observerPath = <span class="string">"#"</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 在数组的原型方法上注入钩子</span></div><div class="line">                $observer.mock(target);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 遍历 target 的属性，可以把数组元素作为属性对待</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> target) &#123;</div><div class="line">                <span class="keyword">if</span> (target.hasOwnProperty(prop)) &#123;</div><div class="line">                    <span class="keyword">if</span> (callback) &#123;</div><div class="line">                        <span class="comment">// arr 为数组</span></div><div class="line">                        <span class="keyword">if</span> (observe.isArray(arr) &amp;&amp; observe.isInArray(arr, prop)) &#123;</div><div class="line">                            eventPropArr.push(prop);</div><div class="line">                            $observer.watch(target, prop);</div><div class="line"></div><div class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (observe.isString(arr) &amp;&amp; prop == arr) &#123;</div><div class="line">                            <span class="comment">// arr 为字符串</span></div><div class="line">                            eventPropArr.push(prop);</div><div class="line">                            $observer.watch(target, prop);</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="comment">// 缺少 callback 参数（实际为 arr）</span></div><div class="line">                        eventPropArr.push(prop);</div><div class="line">                        $observer.watch(target, prop);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            $observer.target = target;</div><div class="line"></div><div class="line">            <span class="comment">// 保存 target 变化时触发的处理函数的堆栈</span></div><div class="line">            <span class="keyword">if</span> (!$observer.propertyChangedHandler) &#123;</div><div class="line">                $observer.propertyChangedHandler = [];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 参数修正</span></div><div class="line">            <span class="keyword">var</span> propChanged = callback ? callback : arr;</div><div class="line"></div><div class="line">            <span class="comment">// 把当前回调函数和观察的属性压入 target 的回调队列</span></div><div class="line">            $observer.propertyChangedHandler.push(&#123;</div><div class="line">                all: !callback,</div><div class="line">                propChanged: propChanged,</div><div class="line">                eventPropArr: eventPropArr</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        _observe.prototype = &#123;</div><div class="line">            <span class="comment">/**</span></div><div class="line">             * target 变化时触发，通过在数组原型方法注入钩子和 definePorprty 实现</div><div class="line">             */</div><div class="line">            <span class="string">"onPropertyChanged"</span>: <span class="function"><span class="keyword">function</span>(<span class="params">prop, value, oldValue, target, path</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (value !== oldValue &amp;&amp; <span class="keyword">this</span>.propertyChangedHandler) &#123;</div><div class="line">                    <span class="keyword">var</span> rootName = observe._getRootName(prop, path);	<span class="comment">// 得到根路径名，允许在回调函数中提供属性名（path）参数</span></div><div class="line"></div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="keyword">this</span>.propertyChangedHandler.length; i &lt; len; i++) &#123;</div><div class="line">                        <span class="keyword">var</span> handler = <span class="keyword">this</span>.propertyChangedHandler[i];</div><div class="line">                        <span class="keyword">if</span> (handler.all || observe.isInArray(handler.eventPropArr, rootName) || rootName.indexOf(<span class="string">"Array-"</span>) === <span class="number">0</span>) &#123;</div><div class="line">                            <span class="comment">// 这里触发回调函数</span></div><div class="line">                            handler.propChanged.call(<span class="keyword">this</span>.target, prop, value, oldValue, path);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 如果通过数组的原型方法触发，则重新观察数组，这里的 prop 为 "Array-slice" 等</span></div><div class="line">                <span class="keyword">if</span> (prop.indexOf(<span class="string">"Array-"</span>) !== <span class="number">0</span> &amp;&amp; <span class="keyword">typeof</span> value === <span class="string">"object"</span>) &#123;</div><div class="line">                    <span class="keyword">this</span>.watch(target, prop, target.$observeProps.$observerPath);</div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            <span class="comment">/**</span></div><div class="line">             * Array 的原型方法注入钩子，在调用时触发 onPropertyChanged</div><div class="line">             */</div><div class="line">            <span class="string">"mock"</span>: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">                observe.methods.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">                    target[item] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                        <span class="keyword">var</span> old = <span class="built_in">Array</span>.prototype.slice.call(<span class="keyword">this</span>, <span class="number">0</span>);</div><div class="line">                        <span class="keyword">var</span> result = <span class="built_in">Array</span>.prototype[item].apply(<span class="keyword">this</span>, <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>));</div><div class="line">                        <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\b"</span> + item + <span class="string">"\\b"</span>).test(observe.triggerStr)) &#123;</div><div class="line">                            <span class="keyword">for</span> (<span class="keyword">var</span> cprop <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</div><div class="line">                                <span class="keyword">if</span> (<span class="keyword">this</span>.hasOwnProperty(cprop) &amp;&amp; !observe.isFunction(<span class="keyword">this</span>[cprop])) &#123;</div><div class="line">                                    self.watch(<span class="keyword">this</span>, cprop, <span class="keyword">this</span>.$observeProps.$observerPath);</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                            <span class="comment">// todo</span></div><div class="line">                            <span class="comment">// 这里作者应该是打算做优化，避免短时间内触发多次回调函数</span></div><div class="line">                            self.onPropertyChanged(<span class="string">"Array-"</span> + item, <span class="keyword">this</span>, old, <span class="keyword">this</span>, <span class="keyword">this</span>.$observeProps.$observerPath);</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">return</span> result;</div><div class="line">                    &#125;;</div><div class="line">                &#125;);</div><div class="line">            &#125;,</div><div class="line">            <span class="comment">/**</span></div><div class="line">             * 观察对象</div><div class="line">             */</div><div class="line">            <span class="string">"watch"</span>: <span class="function"><span class="keyword">function</span>(<span class="params">target, prop, path</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (prop === <span class="string">"$observeProps"</span> || prop === <span class="string">"$observer"</span>) <span class="keyword">return</span>;</div><div class="line">                <span class="keyword">if</span> (observe.isFunction(target[prop])) <span class="keyword">return</span>;</div><div class="line">                <span class="keyword">if</span> (!target.$observeProps) target.$observeProps = &#123;&#125;;</div><div class="line">                <span class="keyword">if</span> (path !== <span class="literal">undefined</span>) &#123;</div><div class="line">                    target.$observeProps.$observerPath = path;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    target.$observeProps.$observerPath = <span class="string">"#"</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">                <span class="keyword">var</span> currentValue = target.$observeProps[prop] = target[prop];</div><div class="line"></div><div class="line">                <span class="comment">// get, set 操作的是 target.$observeProps[prop]</span></div><div class="line">                <span class="built_in">Object</span>.defineProperty(target, prop, &#123;</div><div class="line">                    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">this</span>.$observeProps[prop];</div><div class="line">                    &#125;,</div><div class="line">                    set: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">                        <span class="keyword">var</span> old = <span class="keyword">this</span>.$observeProps[prop];</div><div class="line">                        <span class="keyword">this</span>.$observeProps[prop] = value;</div><div class="line">                        <span class="comment">// 值改变时触发回调</span></div><div class="line">                        self.onPropertyChanged(prop, value, old, <span class="keyword">this</span>, target.$observeProps.$observerPath);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> currentValue == <span class="string">"object"</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (observe.isArray(currentValue)) &#123;</div><div class="line">                        <span class="comment">// 如果值是数组，则注入钩子，处理同构造函数一致</span></div><div class="line">                        <span class="keyword">this</span>.mock(currentValue);</div><div class="line"></div><div class="line">                        <span class="keyword">if</span> (currentValue.length === <span class="number">0</span>) &#123;</div><div class="line">                            <span class="keyword">if</span> (!currentValue.$observeProps) currentValue.$observeProps = &#123;&#125;;</div><div class="line">                            <span class="keyword">if</span> (path !== <span class="literal">undefined</span>) &#123;</div><div class="line">                                currentValue.$observeProps.$observerPath = path;</div><div class="line">                            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                                currentValue.$observeProps.$observerPath = <span class="string">"#"</span>;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> cprop <span class="keyword">in</span> currentValue) &#123;</div><div class="line">                        <span class="keyword">if</span> (currentValue.hasOwnProperty(cprop)) &#123;</div><div class="line">                            <span class="keyword">this</span>.watch(currentValue, cprop, target.$observeProps.$observerPath + <span class="string">"-"</span> + prop);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> _observe(target, arr, callback)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 数组的原型方法</span></div><div class="line">    observe.methods = [<span class="string">"concat"</span>, <span class="string">"every"</span>, <span class="string">"filter"</span>, <span class="string">"forEach"</span>, <span class="string">"indexOf"</span>, <span class="string">"join"</span>, <span class="string">"lastIndexOf"</span>, <span class="string">"map"</span>, <span class="string">"pop"</span>, <span class="string">"push"</span>, <span class="string">"reduce"</span>, <span class="string">"reduceRight"</span>, <span class="string">"reverse"</span>, <span class="string">"shift"</span>, <span class="string">"slice"</span>, <span class="string">"some"</span>, <span class="string">"sort"</span>, <span class="string">"splice"</span>, <span class="string">"unshift"</span>, <span class="string">"toLocaleString"</span>, <span class="string">"toString"</span>, <span class="string">"size"</span>]</div><div class="line">    <span class="comment">// 会造成数组改变的原型方法</span></div><div class="line">    observe.triggerStr = [<span class="string">"concat"</span>, <span class="string">"pop"</span>, <span class="string">"push"</span>, <span class="string">"reverse"</span>, <span class="string">"shift"</span>, <span class="string">"sort"</span>, <span class="string">"splice"</span>, <span class="string">"unshift"</span>, <span class="string">"size"</span>].join(<span class="string">","</span>)</div><div class="line"></div><div class="line">    observe.isArray = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object Array]'</span>;</div><div class="line">    &#125;</div><div class="line">    observe.isString = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">"string"</span>;</div><div class="line">    &#125;</div><div class="line">    observe.isInArray = <span class="function"><span class="keyword">function</span>(<span class="params">arr, item</span>) </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = arr.length; --i &gt; <span class="number">-1</span>;) &#123;</div><div class="line">            <span class="keyword">if</span> (item === arr[i]) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    observe.isFunction = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) == <span class="string">'[object Function]'</span>;</div><div class="line">    &#125;</div><div class="line">    observe.twoWay = <span class="function"><span class="keyword">function</span>(<span class="params">objA, aProp, objB, bProp</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> objA[aProp] === <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> objB[bProp] === <span class="string">"object"</span>) &#123;</div><div class="line">            observe(objA, aProp, <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>) </span>&#123;</div><div class="line">                objB[bProp] = <span class="keyword">this</span>[aProp];</div><div class="line">            &#125;)</div><div class="line">            observe(objB, bProp, <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>) </span>&#123;</div><div class="line">                objA[aProp] = <span class="keyword">this</span>[bProp];</div><div class="line">            &#125;)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            observe(objA, aProp, <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>) </span>&#123;</div><div class="line">                objB[bProp] = value;</div><div class="line">            &#125;)</div><div class="line">            observe(objB, bProp, <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>) </span>&#123;</div><div class="line">                objA[aProp] = value;</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    observe._getRootName = <span class="function"><span class="keyword">function</span>(<span class="params">prop, path</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (path === <span class="string">"#"</span>) &#123;</div><div class="line">            <span class="keyword">return</span> prop;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> path.split(<span class="string">"-"</span>)[<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">    observe.add = <span class="function"><span class="keyword">function</span>(<span class="params">obj, prop, value</span>) </span>&#123;</div><div class="line">        obj[prop] = value;</div><div class="line">        <span class="keyword">var</span> $observer = obj.$observer;</div><div class="line">        $observer.watch(obj, prop);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">Array</span>.prototype.size = <span class="function"><span class="keyword">function</span>(<span class="params">length</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.length = length;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> != <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">module</span>.exports &amp;&amp; <span class="keyword">this</span>.module !== <span class="built_in">module</span>) &#123;</div><div class="line">        <span class="built_in">module</span>.exports = observe</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</div><div class="line">        define(observe)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        win.observe = observe</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">&#125;)(<span class="built_in">Function</span>(<span class="string">'return this'</span>)());</div></pre></td></tr></table></figure>
<h3 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h3><ul>
<li><code>get</code>、 <code>set</code> 方法观察对象，值保存在 <code>.$observer</code> 内避免重复 set</li>
<li>hook 所有会改变数组的原型方法，如果重新引用一个数组则需要重新 watch</li>
<li>值改变后会马上触发回调函数，如果同时触发多个则会造成性能问题，可以通过加入队列和触发轮询优化</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;只有158行代码的 &lt;a href=&quot;https://github.com/kmdjs/observejs&quot;&gt;observerjs&lt;/a&gt; 确实很吸引人，奔着如何观察复杂对象和数组的变化的目的啃了一遍源码，确实有收获&lt;/p&gt;
&lt;p&gt;直接贴加了注释的源码~~&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://cupools.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>NextGEN Gallery 无法建表</title>
    <link href="http://cupools.github.io/2015/102722/"/>
    <id>http://cupools.github.io/2015/102722/</id>
    <published>2015-10-26T16:00:00.000Z</published>
    <updated>2016-08-26T07:55:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Wordpress 主题开发直接看着官方文档啃下来也是挺辛苦的，拖了三个月北京毕设半个月病假终于在跨过 NGG 的坑之后搞定了，撒花撒花</p>
<blockquote>
<p><a href="http://www.nextgen-gallery.com/" target="_blank" rel="external">NextGEN Gallery</a> is the most popular gallery plugin ever for WordPress. Enjoy fully responsive design, a dozen gallery styles, a stunning full screen lightbox, commenting and social sharing for images, ecommerce, proofing, and more.</p>
</blockquote>
<p>简单来说就是一个图片管理工具，功能很强大，但也有点不和谐。我遇到的是直接在数据库删除了 <code>ngg_</code> 三个表之后，无论如何重装插件，都没法重新建表的问题。在 <a href="https://wordpress.org/support/plugin/nextgen-gallery" target="_blank" rel="external">这里</a> 喵了一个早上没发现满意的答案，Cais 在这类问题下大部分回答是清理浏览器缓存，重新启用或重装插件，还有恢复站点备份（我摔）</p>
<p>Wordpress 版本 4.3.1-zh_CN<br>Nextgen Next 版本 2.1.15</p>
<p><strong>下面是正文</strong></p>
<a id="more"></a>
<h2 id="你好我是正文"><a href="#你好我是正文" class="headerlink" title="你好我是正文"></a>你好我是正文</h2><p>于是备份了本地的代码和数据库，在本地测试环境上重现问题，并做调试</p>
<p>尝试从源码找到建表方法的调用，无果</p>
<p>由于多次重装 NGG 之后之前的配置项保留，因此猜测可能是插件在数据库的某个地方还保留了配置数据，然后安装的过程中由于配置数据的存在而忽略建表。在看到 <a href="http://www.alidocx.com/?p=635&amp;ckattempt=1" target="_blank" rel="external">这个答案</a> 后确定了方向，应该是 <code>wp_options</code>， <code>wp_postmeta</code> 这两个表的问题（Cais 还提到了 <code>wp_usermeta</code>，不过这里没关系）</p>
<p>根据 <a href="http://www.alidocx.com/?p=635&amp;ckattempt=1" target="_blank" rel="external">这个答案</a> 的方法做处理，删除 <code>wp_options</code> 带有 <code>ngg</code> 字段的五条记录，发现配置数据成功被重置，但依然无法建表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">delete</span> <span class="keyword">from</span> wp_options <span class="keyword">where</span> option_name <span class="keyword">like</span> <span class="string">"%ngg%"</span>;</div></pre></td></tr></table></figure>
<p>同时删除 <code>wp_postmeta</code> 带 <code>nextgen</code> 字段的记录，没什么用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">delete</span> <span class="keyword">from</span> wp_postmeta <span class="keyword">where</span> meta_value <span class="keyword">like</span> <span class="string">"%nextgen%"</span>；</div></pre></td></tr></table></figure>
<p>于是安装了插件 <a href="https://wordpress.org/plugins/wordpress-database-reset/" target="_blank" rel="external">WP Database Reset</a>，准备暴力定位问题</p>
<ol>
<li>重置除 user 外的所有表，启用 NGG，成功建表</li>
<li>恢复之前备份的数据库，再逐个表重置并尝试启用 NGG 是否可以建表，然后发现了问题在于 <code>wp_options</code>，接下来要找到其中搞鬼的记录了</li>
<li><p>重置 <code>wp_options</code>，导出所有记录；进入插件页面，导出所有记录；启用 NGG，导出所有记录。对比之后发现启用 NGG 会在 <code>wp_options</code> 里面创建 6 条记录。关键的 <code>pope_module_list</code> 在之前被忽略了</p>
<p> <img src="/images/ngg-10-27.png" alt="Records"></p>
</li>
<li><p><strong>删除 <code>pope_module_list</code> 这条记录，启用 NGG，又见到熟悉的 <code>ngg_</code>，问题解决</strong>🎉🎉</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">delete</span> <span class="keyword">from</span> wp_options <span class="keyword">where</span> option_name=<span class="string">"pope_module_list"</span>;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>简单看了下 <code>pope_module_list</code> 的值，里面存放的应该是各个模块及其版本号，包括 <code>photocrati-nextgen-legacy</code>，而建表的方法 <code>modules/ngglegacy/admin/install.php</code> 应该就是这里相关了。如果联系上 <code>update</code> 方法，那么更新 NGG 的话应该会从这个值里面获取模块版本号做对比，不需要更新则忽略，然后造成了上面的问题</p>
<p>话说删除插件好歹顺手把数据库也清了啊。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Wordpress 主题开发直接看着官方文档啃下来也是挺辛苦的，拖了三个月北京毕设半个月病假终于在跨过 NGG 的坑之后搞定了，撒花撒花&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.nextgen-gallery.com/&quot;&gt;NextGEN Gallery&lt;/a&gt; is the most popular gallery plugin ever for WordPress. Enjoy fully responsive design, a dozen gallery styles, a stunning full screen lightbox, commenting and social sharing for images, ecommerce, proofing, and more.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单来说就是一个图片管理工具，功能很强大，但也有点不和谐。我遇到的是直接在数据库删除了 &lt;code&gt;ngg_&lt;/code&gt; 三个表之后，无论如何重装插件，都没法重新建表的问题。在 &lt;a href=&quot;https://wordpress.org/support/plugin/nextgen-gallery&quot;&gt;这里&lt;/a&gt; 喵了一个早上没发现满意的答案，Cais 在这类问题下大部分回答是清理浏览器缓存，重新启用或重装插件，还有恢复站点备份（我摔）&lt;/p&gt;
&lt;p&gt;Wordpress 版本 4.3.1-zh_CN&lt;br&gt;Nextgen Next 版本 2.1.15&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下面是正文&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Wordpress" scheme="http://cupools.github.io/tags/Wordpress/"/>
    
  </entry>
  
  <entry>
    <title>img-sprite 实现</title>
    <link href="http://cupools.github.io/2015/100122/"/>
    <id>http://cupools.github.io/2015/100122/</id>
    <published>2015-09-30T16:00:00.000Z</published>
    <updated>2016-08-26T07:56:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>喵了很久没有发现 Grunt 上有比较舒服的合并精灵图工具，于是有了自己写一个的想法，于是有了 <a href="https://github.com/cupools/img-sprite" target="_blank" rel="external">img-sprite</a>，于是有了 <a href="https://github.com/cupools/grunt-img-sprite" target="_blank" rel="external">grunt-img-sprite</a></p>
<a id="more"></a>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>针对之前页面重构的方式，我对于一个精灵图处理工具的设想是这样的：</p>
<ol>
<li>像 FIS 一般，通过在 css 文件中背景图片添加标识合并精灵图。<strong>跟平时一样写样式，仅在打包阶段产出精灵图和新的 css 文件</strong>。不关心是否使用 LESS 等</li>
<li>能够根据标识产出多个精灵图</li>
<li>不依赖 Less 等 CSS 预处理器</li>
<li>兼容 Retina，并自动插入媒体查询代码</li>
<li>Base64 内联图片，通过 <code>?__inline</code> 标识</li>
<li>使用要简单，简单，简单，<strong>不依赖于 GM 等图像处理库</strong></li>
<li>设计稿每次导出 @2x 的图片即可，由工具产出 @1x 的图片</li>
</ol>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install img-sprite --save</div></pre></td></tr></table></figure>
<h3 id="处理一个-css-文件"><a href="#处理一个-css-文件" class="headerlink" title="处理一个 css 文件"></a>处理一个 css 文件</h3><h4 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> sprite = <span class="built_in">require</span>(<span class="string">'img-sprite'</span>);</div><div class="line"></div><div class="line">sprite(&#123;</div><div class="line">    src: <span class="string">'test/css/main.css'</span>,</div><div class="line">    dest: <span class="string">'test/css/dest.css'</span>,</div><div class="line">    output: <span class="string">'test/images'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="main-css"><a href="#main-css" class="headerlink" title="main.css"></a>main.css</h4><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.icon0</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">128px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">128px</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(../images/0.png?__tom) no-repeat;</div><div class="line">  <span class="attribute">background-size</span>: <span class="number">128px</span> <span class="number">128px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.icon1</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">128px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">128px</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#ccc</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(../images/1.png?__tom) no-repeat;</div><div class="line">  <span class="attribute">background-size</span>: <span class="number">128px</span> <span class="number">128px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.icon2</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#ccc</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(../images/2.png?__inline) no-repeat;</div><div class="line">  <span class="attribute">background-size</span>: <span class="number">50px</span> <span class="number">50px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/images/img-sprite/00.png" alt="css 文件"></p>
<p><img src="/images/img-sprite/01.png" alt="精灵图"></p>
<h3 id="处理多个-css-文件"><a href="#处理多个-css-文件" class="headerlink" title="处理多个 css 文件"></a>处理多个 css 文件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> sprite = <span class="built_in">require</span>(<span class="string">'img-sprite'</span>);</div><div class="line"></div><div class="line">sprite(&#123;</div><div class="line">    src: [<span class="string">'test/css/one.css'</span>, <span class="string">'test/css/two.css'</span>],</div><div class="line">    dest: <span class="string">'test/css'</span>,</div><div class="line">    output: <span class="string">'test/images'</span>,</div><div class="line">    retina: <span class="literal">false</span>,</div><div class="line">    prefix: <span class="string">'sp-'</span>,</div><div class="line">    imgPath: <span class="string">'/public/images/'</span>,</div><div class="line">    algorithm: <span class="string">'top-down'</span>,</div><div class="line">    sizeLimit: <span class="number">10</span>*<span class="number">1024</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="命令行使用"><a href="#命令行使用" class="headerlink" title="命令行使用"></a>命令行使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ bin/sprite -h</div><div class="line">Options:</div><div class="line">  <span class="_">-s</span>, --src     css file input path                          [string] [required]</div><div class="line">  <span class="_">-d</span>, --dest    css file output path                         [string] [required]</div><div class="line">  -o, --output  images output path                                      [string]</div><div class="line">  -r, --retina  retina or not, default to <span class="literal">true</span>         				   [boolean]</div><div class="line">  --padding     padding between images, default to 10                   [string]</div><div class="line">  --prefix      add before images filename, default to <span class="string">"sprite-"</span>        [string]</div><div class="line">  --imgPath     images path, default to <span class="string">"../images/"</span>                    [string]</div><div class="line">  --algorithm   list algorithm, default to <span class="string">"binary-tree"</span>                [string]</div><div class="line">  --sizeLimit   size <span class="built_in">limit</span> <span class="keyword">for</span> inline images, default to 5000           [string]</div></pre></td></tr></table></figure>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><h3 id="src"><a href="#src" class="headerlink" title="src"></a>src</h3><ul>
<li>类型：Array</li>
<li>说明：css 文件路径，必须</li>
<li>默认：无</li>
</ul>
<h3 id="dest"><a href="#dest" class="headerlink" title="dest"></a>dest</h3><ul>
<li>类型：String</li>
<li>说明：css 产出路径，当仅处理一个 css 文件时可指定文件名</li>
<li>默认：当前目录</li>
</ul>
<h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><ul>
<li>类型：String</li>
<li>说明：精灵图产出路径</li>
<li>默认：当前目录</li>
</ul>
<h3 id="retina"><a href="#retina" class="headerlink" title="retina"></a>retina</h3><ul>
<li>类型：Boolean</li>
<li>说明：是否产出 @2x 图片</li>
<li>默认：true</li>
</ul>
<h3 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h3><ul>
<li>类型：Number</li>
<li>说明：精灵图中图片间距</li>
<li>默认：10</li>
</ul>
<h3 id="prefix"><a href="#prefix" class="headerlink" title="prefix"></a>prefix</h3><ul>
<li>类型：String</li>
<li>说明：精灵图前缀；当产出 css 文件与指定 css 的目录一致时，为 css 文件添加该前缀</li>
<li>默认：’sprite-‘</li>
</ul>
<h3 id="imgPath"><a href="#imgPath" class="headerlink" title="imgPath"></a>imgPath</h3><ul>
<li>类型：String</li>
<li>说明：css 文件中的图片路径</li>
<li>默认：’../images/‘</li>
</ul>
<h3 id="algorithm"><a href="#algorithm" class="headerlink" title="algorithm"></a>algorithm</h3><ul>
<li>类型：String</li>
<li>说明：图片排序算法</li>
<li>可选：top-down, left-right, diagonal, alt-diagonal, binary-tree</li>
<li>默认：’binary-tree’</li>
</ul>
<h3 id="media"><a href="#media" class="headerlink" title="media"></a>media</h3><ul>
<li>类型：String</li>
<li>说明：媒体查询条件</li>
<li>默认：only screen and (-webkit-min-device-pixel-ratio: 1.5)</li>
</ul>
<h3 id="sizeLimit"><a href="#sizeLimit" class="headerlink" title="sizeLimit"></a>sizeLimit</h3><ul>
<li>类型：Number</li>
<li>说明：内联图片大小限制</li>
<li>默认：5000</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>img-sprite 基于 <a href="https://github.com/Ensighten/spritesmith" target="_blank" rel="external">spritesmith</a> 和 <a href="https://github.com/reworkcss/css" target="_blank" rel="external">css</a> 实现。spritesmith 解决了图片合并、坐标计算这几个关键的问题，css 解决了图片路径替换、样式补充的问题。然后我做得东西就比较简单了。根据几个需求点简单列举一下</p>
<h4 id="1-像-FIS-一般，直接从-css-文件中通过标记提取图片路径处理并产出精灵图和新的-css-文件"><a href="#1-像-FIS-一般，直接从-css-文件中通过标记提取图片路径处理并产出精灵图和新的-css-文件" class="headerlink" title="1. 像 FIS 一般，直接从 css 文件中通过标记提取图片路径处理并产出精灵图和新的 css 文件"></a>1. 像 FIS 一般，直接从 css 文件中通过标记提取图片路径处理并产出精灵图和新的 css 文件</h4><p>通过 css-parse 构建出 css 文件对应的 AST（抽象语法树），递归遍历 AST 根据标识得到需要被合并的图片的路径，之后交给 spritemith 处理产出精灵图，再根据 spritemith 返回的 map 将精灵图的路径、图片大小、图片位置调整到 AST，产出新的 css 文件即可</p>
<h4 id="2-能够根据标识产出多个精灵图"><a href="#2-能够根据标识产出多个精灵图" class="headerlink" title="2. 能够根据标识产出多个精灵图"></a>2. 能够根据标识产出多个精灵图</h4><p>通过 <code>icon.png?__xxx</code> 标记图片，通过 <code>xxx</code> 决定图片应该被合并到哪一个精灵图</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 提取 url，分组1为url，分组2为精灵图标记，分组3为精灵图名称</span></div><div class="line"><span class="keyword">var</span> urlReg = <span class="regexp">/(?:url\(['"]?([\w\W]+?)(?:\?(__)?([\w\W]+?))?['"]?\))/</span>,</div></pre></td></tr></table></figure>
<h4 id="3-不依赖-Less-等-CSS-预处理器"><a href="#3-不依赖-Less-等-CSS-预处理器" class="headerlink" title="3. 不依赖 Less 等 CSS 预处理器"></a>3. 不依赖 Less 等 CSS 预处理器</h4><p>跟平时一样写代码，在完成之后一次构建处理即可。当然平时用预处理器更方便了</p>
<h4 id="4-兼容-Retina"><a href="#4-兼容-Retina" class="headerlink" title="4. 兼容 Retina"></a>4. 兼容 Retina</h4><p>之前尝试过其他自动雪碧图工具，比较不舒服的一个地方是对 Retina 的兼容。img-sprite 对 Retina 的处理是产出两套精灵图，并在 css 文件底部插入 media。默认以 @2x 的切图合并精灵图，然后依赖 <a href="http://www.graphicsmagick.org/" target="_blank" rel="external">GM</a> 缩小图片产出 @1x 的精灵图。</p>
<h4 id="5-Base64-内联图片"><a href="#5-Base64-内联图片" class="headerlink" title="5. Base64 内联图片"></a>5. Base64 内联图片</h4><p>通过 <code>icon.png?__inline</code> 标记即可</p>
<h4 id="6-使用要简单，简单，简单"><a href="#6-使用要简单，简单，简单" class="headerlink" title="6. 使用要简单，简单，简单"></a>6. 使用要简单，简单，简单</h4><p>从 <code>v0.3.0</code> 开始使用 <a href="https://github.com/zhangyuanwei/node-images" target="_blank" rel="external">images</a>，不需要安装 GM 等图形处理库。配置比较简单，需要目标 css 路径（src），产出 css 路径（dest），精灵图产出路径（output）三个参数。如果 src 有多个文件，那么 dest 指定路径并产出多个 css 文件；如果 src 只有一个文件，那么 dest 可以指定产出 css 的路径和文件名。可以配合 CSS 预处理器更方便地写样式</p>
<h4 id="7-设计稿每次导出-2x-的图片即可，由工具产出-1x-的图片"><a href="#7-设计稿每次导出-2x-的图片即可，由工具产出-1x-的图片" class="headerlink" title="7. 设计稿每次导出 @2x 的图片即可，由工具产出 @1x 的图片"></a>7. 设计稿每次导出 @2x 的图片即可，由工具产出 @1x 的图片</h4><p>移动端设计稿导出原始大小图片即可，img-sprite 基于 @2x 的精灵图再产出 @1x 的精灵图，并在 css 文件底部自动插入 media</p>
<h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><ol>
<li><p>不依赖 GM 等图形处理库<br> img-sprite 从 <code>v0.3.0</code> 开始使用 <a href="https://github.com/zhangyuanwei/node-images" target="_blank" rel="external">images</a> 替代了 spritesmith 默认的位图引擎，解决了 windows 平台下产出精灵图可能出现噪点的情况，缩短了产出图片的耗时。同时不再依赖 GM，再也不需要折腾啦！产出图片的质量也比较出色，感谢作者~</p>
<p> 此外尝试了 node Jimp，缩小图片效果不理想；尝试了 <a href="http://phantomjs.org/" target="_blank" rel="external">phantomjs</a> 作为位图引擎，但发现在 window 和 osx 下速度大幅慢于其他引擎，故不采用。暂时不支持在 img-sprite 中配置其他的位图引擎</p>
</li>
<li><p>对其他样式的影响<br> 调整 AST 的过程中会将做这样的处理，删除 background 有关的样式并插入新的值。保留背景颜色，不支持同时定义多个背景图片</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> colorReg = <span class="regexp">/#\w&#123;3,6&#125;|rgba?\(.+?\)/</span>,</div><div class="line">    resetBgReg = <span class="regexp">/background-[size|image|position]/</span>,</div><div class="line">...</div><div class="line"><span class="comment">// 设置 background 样式</span></div><div class="line">spriteSet[i].node.value = color + <span class="string">'url('</span> + options.imgPath + basename + <span class="string">') '</span> + offsetX + <span class="string">' '</span> + offsetY;</div><div class="line">...</div><div class="line"><span class="comment">// 插入 background-size</span></div><div class="line">spriteSet[i].parent.push(&#123;</div><div class="line">    type: <span class="string">'declaration'</span>,</div><div class="line">    property: <span class="string">'background-size'</span>,</div><div class="line">    value: ceil(properties.width / pow) + <span class="string">'px '</span> + ceil(properties.height / pow) + <span class="string">'px'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li>缺点  <ul>
<li>目前仅支持处理 .png</li>
<li>写样式的时候建议元素的宽高和背景图的宽高一致，其他情况下精灵图不方便处理</li>
<li>不支持背景图 repeat</li>
<li>暂不支持多个背景图</li>
<li>仅支持处理 .css。实际上推荐使用 LES 等写样式，在产出 css 文件后交给 img-sprite 做进一步精灵图合并处理即可</li>
</ul>
</li>
</ol>
<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><ul>
<li>0.3.2：<ul>
<li>修复 <code>background-image</code> 抛出异常的情况</li>
<li>修复 <code>?__inline</code> 被插入到 media 中的情况</li>
<li>完善日志</li>
</ul>
</li>
<li>0.3.0：<ul>
<li>使用 <a href="https://github.com/zhangyuanwei/node-images" target="_blank" rel="external">images</a> 替代了 spritesmith 默认的位图引擎，解决了 windows 平台下产出精灵图可能出现噪点的情况，同时不再依赖 GM</li>
</ul>
</li>
<li>0.2.0：<ul>
<li>支持通过<code>?__inline</code>内联图片</li>
<li>使用 <a href="https://github.com/jprichardson/node-fs-extra" target="_blank" rel="external">fs-extra</a> 操作文件，支持创建多层目录</li>
<li>添加对不存在的图片路径的过滤</li>
<li>允许重写 log 方法</li>
<li>尝试添加单元测试用例</li>
</ul>
</li>
<li>0.1.2：修复非 retina 情况下图片命名 @2x 的情况</li>
<li>0.1.0：基本功能</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;喵了很久没有发现 Grunt 上有比较舒服的合并精灵图工具，于是有了自己写一个的想法，于是有了 &lt;a href=&quot;https://github.com/cupools/img-sprite&quot;&gt;img-sprite&lt;/a&gt;，于是有了 &lt;a href=&quot;https://github.com/cupools/grunt-img-sprite&quot;&gt;grunt-img-sprite&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://cupools.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>img-sprite 设想</title>
    <link href="http://cupools.github.io/2015/093014/"/>
    <id>http://cupools.github.io/2015/093014/</id>
    <published>2015-09-29T16:00:00.000Z</published>
    <updated>2016-08-17T14:14:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大概有两种方法制作精灵图</p>
<ol>
<li>开发阶段，工具处理图片得到对应的<code>.icon-class</code>，再直接使用相应的 class、或者通过 css 预处理工具 mixin 即可。不具有入侵性</li>
<li>构建阶段，工具处理 css 文件并在生成精灵图后将路径和大小替换回去，在原本 css 文件的基础上产出新的 css 文件</li>
</ol>
<a id="more"></a>
<p>本工具主要基于方法 2 的思路实现，理由如下：</p>
<ol>
<li>希望开发人员能轻松通过标记合并特定的图片，而非配置文件。可方便维护和产出多个精灵图</li>
<li>不依赖于 CSS 预处理工具，降低使用门槛</li>
<li>开发阶段不需要过多去注意合并精灵图的事情</li>
</ol>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h3><ul>
<li>CSS 文件中提取出图片地址</li>
<li>根据图片地址，使用 spritemith 合并图片，并得到坐标</li>
<li>将 CSS 中的图片地址、大小替换为精灵图，并添加坐标</li>
</ul>
<h3 id="其他需要"><a href="#其他需要" class="headerlink" title="其他需要"></a>其他需要</h3><ul>
<li>提取颜色，区分十六进制和 rgb</li>
<li>Base64 标记（<code>v0.2.0</code>）</li>
<li>自动生成图片大小，即常规精灵图工具的简化（todo）</li>
<li>多个 css 文件复用图片，需要支持数组</li>
<li>@2x，通过 media 重写特定的背景样式</li>
</ul>
<h2 id="遍历-AST-树"><a href="#遍历-AST-树" class="headerlink" title="遍历 AST 树"></a>遍历 AST 树</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul>
<li>遍历所有对象节点，包括数组</li>
<li>提供 enter 和 leave 调用</li>
<li>基本数据类型不需要查看</li>
</ul>
<hr>
<ul>
<li>对象执行 enter 和 leave<ul>
<li>next：没什么用</li>
<li>skip：不检查当前 node 的子节点</li>
<li>stop：停止遍历</li>
<li>remove：移除当前 node</li>
</ul>
</li>
<li>基本数据不做处理</li>
<li>数组需要遍历，递归每个对象</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;大概有两种方法制作精灵图&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开发阶段，工具处理图片得到对应的&lt;code&gt;.icon-class&lt;/code&gt;，再直接使用相应的 class、或者通过 css 预处理工具 mixin 即可。不具有入侵性&lt;/li&gt;
&lt;li&gt;构建阶段，工具处理 css 文件并在生成精灵图后将路径和大小替换回去，在原本 css 文件的基础上产出新的 css 文件&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://cupools.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>安装 GraphicsMagick 这个大坑</title>
    <link href="http://cupools.github.io/2015/092914/"/>
    <id>http://cupools.github.io/2015/092914/</id>
    <published>2015-09-28T16:00:00.000Z</published>
    <updated>2016-08-26T07:56:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>这段时间在搞 img-sprite 这个东西，然后需要缩小图片，然后发现 Jimp 的表现不理想，于是只能妥协使用 gm，然后一下子就掉坑里了弄了整个下午😢</p>
<a id="more"></a>
<h2 id="windows-安装"><a href="#windows-安装" class="headerlink" title="windows 安装"></a>windows 安装</h2><p>去 <a href="http://www.graphicsmagick.org/" target="_blank" rel="external">官网</a> 下载 .exe 安装一直 next 就行了</p>
<h2 id="osx-安装"><a href="#osx-安装" class="headerlink" title="osx 安装"></a>osx 安装</h2><ol>
<li><p>首先安装 <a href="http://brew.sh/index_zh-cn.html" target="_blank" rel="external">Homebrew</a>，osx 的套件管理器，命令行安装即可</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">ruby <span class="_">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div></pre></td></tr></table></figure>
</li>
<li><p>修改 /usr/local 权限，防止之后安装 gm 各种报错</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 为文件所有者同一分组的用户添加可写权限</span></div><div class="line">sudo chmod -R g+w /usr/<span class="built_in">local</span></div></pre></td></tr></table></figure>
</li>
<li><p>通过 brew 安装 GraphicsMagick（libpng 等依赖包会一并下载）</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">brew install graphicsmagick</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="可忽略的黑历史"><a href="#可忽略的黑历史" class="headerlink" title="可忽略的黑历史"></a>可忽略的黑历史</h2><ol>
<li><p>最开始尝试通过源码编译直接安装 GraphicsMagick，之后发现调用 <code>node-gm</code> 报错，这才意识到需要先安装好 libpng 之类的依赖包</p>
<p> 安装 GraphicsMagick</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> 源目录</div><div class="line">$ .configure</div><div class="line">$ make</div><div class="line">$ sudo make install</div></pre></td></tr></table></figure>
<p> node 里面执行<code>gm()</code>报错</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">Caught exception: Error: Command failed: convert: no decode delegate <span class="keyword">for</span> this image format</div></pre></td></tr></table></figure>
<p> 如果安装 GraphicsMagick 之前执行 <code>.configure</code> 之后看到<code>PNG</code>这一项是 no，那么说明安装有问题</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">Magick++          --with-magick-plus-plus=yes	yes</div><div class="line">PERL              --with-perl=no				no</div><div class="line">PNG               --with-png=yes				no</div><div class="line">TIFF              --with-tiff=yes				no</div><div class="line">TRIO              --with-trio=yes				no</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li>找到并下载了 <a href="http://www.libpng.org/pub/png/libpng.html" target="_blank" rel="external">libpng</a>，然后通过上述一样的方法安装 libpng，重新安装 gm，问题没解决。尝试又安装了 <a href="http://www.zlib.net/" target="_blank" rel="external">zlib</a>，未果。发现没法 <code>make uninstall libpng</code> 有点凄凉</li>
<li>找到一个 <a href="http://stackoverflow.com/questions/11196562/how-to-install-graphicsmagick-with-png-support-on-amazon-ec2" target="_blank" rel="external">看起来靠谱的答案</a>，没找到 libpng-dev 这个包。在 <a href="http://www.libpng.org/pub/png/libpng.html" target="_blank" rel="external">libpng 官网</a> 下载了 lpng12.zip 发现没法安装</li>
<li><p>放弃之前的做法，尝试通过 brew 安装。安装过程顺利，但最后出现类似如下报错，确定是权限问题。按照 <a href="http://stackoverflow.com/questions/11237048/homebrew-symlink-error" target="_blank" rel="external">这里</a> 的提示解决了问题。解决方法是，brew rm 之前安装的包，然后修改 /usr/local/ 可写权限，再重新下载即可</p>
<p> 报错</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ brew install graphicsmagick</div><div class="line">....</div><div class="line"></div><div class="line">$ brew link graphicsmagick</div><div class="line">Linking /usr/<span class="built_in">local</span>/Cellar/graphicsmagick/1.3.21... </div><div class="line">Error: Could not symlink include/GraphicsMagick/Magick++/Blob.h</div><div class="line">/usr/<span class="built_in">local</span>/include/GraphicsMagick/Magick++ is not writable.</div><div class="line"></div><div class="line"><span class="comment"># 类似</span></div><div class="line">Could not symlink xxx</div><div class="line">xxx is not writable</div></pre></td></tr></table></figure>
<p> 解决</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ brew rm graphicsmagick</div><div class="line">$ brew rm libpng</div><div class="line">...</div><div class="line"></div><div class="line">$ sudo chmod -R g+w /usr/<span class="built_in">local</span></div><div class="line"></div><div class="line">$ brew install graphicsmagick</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://linfan.info/blog/2012/02/25/homebrew-installation-and-usage/" target="_blank" rel="external">Homebrew 的安装与使用</a></p>
<p><a href="http://vbird.dic.ksu.edu.tw/linux_basic/0210filepermission.php" target="_blank" rel="external">鸟哥的私房菜 - 文件权限</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这段时间在搞 img-sprite 这个东西，然后需要缩小图片，然后发现 Jimp 的表现不理想，于是只能妥协使用 gm，然后一下子就掉坑里了弄了整个下午😢&lt;/p&gt;
    
    </summary>
    
    
      <category term="配置" scheme="http://cupools.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>算是个总结吧</title>
    <link href="http://cupools.github.io/2015/091315/"/>
    <id>http://cupools.github.io/2015/091315/</id>
    <published>2015-09-12T16:00:00.000Z</published>
    <updated>2016-08-26T07:57:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>火车上起得早，还有两个钟的时间回到广州。于是又想着是不是该写点什么，然后想到什么写什么好了。在北京待了两个多月的时间，学了一些东西，但也荒废了许多时间。简单遍历一下，差不多做了这么几件事情</p>
<a id="more"></a>
<h2 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h2><p>预定的看书计划完成了一半，是一开始太贪心了吗…</p>
<h4 id="Javascript-语言精粹"><a href="#Javascript-语言精粹" class="headerlink" title="Javascript 语言精粹"></a>Javascript 语言精粹</h4><p>在去北京的火车上看完，印象很深刻的是对原型的解释、构造函数的使用、this 的解释、函数的调用方式、函数式编程等。虽然平时写代码也是这些东西，但是看一遍下来会有眼前一亮的感觉，暴露了之前没好好看权威指南吗..书上的内容很清晰准确，收拾了很多自己疑惑的地方</p>
<h4 id="Javascript-设计模式"><a href="#Javascript-设计模式" class="headerlink" title="Javascript 设计模式"></a>Javascript 设计模式</h4><p>之前在公司曾利用午休半个钟的时间啃这本书，看了三分之一差不多，但当时没有做笔记，于是在北京又重新啃了。很推荐这本书，其中讲解的设计模式立足于 Javascript，配合之前项目中的一些实践，不难理解，会有对号入座的感觉，回过头来再写代码会有意识地往这方面思考。书中也提到了 Javascript MV* 模式的概念，这应该是由前端的特点决定的吧</p>
<h4 id="编写高质量代码"><a href="#编写高质量代码" class="headerlink" title="编写高质量代码"></a>编写高质量代码</h4><p>内容很丰富的一本书，涵盖了很多个方面的问题，最令人惊喜的是其中对于执行上下文和作用域的解释。其他还有部分代码技巧，数据交互方式和安全攻击等也是一个比较好的积累</p>
<h4 id="了不起的-Node-js"><a href="#了不起的-Node-js" class="headerlink" title="了不起的 Node.js"></a>了不起的 Node.js</h4><p>由于之前看过 Node 相关的其他书籍，因此觉得这本书看上去很熟悉，套路也很普通，由 Node 的简单介绍，到网络协议和几个主要模块的介绍，还有框架的使用。应该说很普通吧</p>
<h4 id="基于MVC的Javascript-Web富应用开发"><a href="#基于MVC的Javascript-Web富应用开发" class="headerlink" title="基于MVC的Javascript Web富应用开发"></a>基于MVC的Javascript Web富应用开发</h4><p>跟别人借的书，翻了半本不到就被要回去了。书中以构建一个完整的 MVC 项目的例子逐步介绍代码的结构和封装方式，对理解 MVC 有挺大帮助的感觉</p>
<h4 id="jQuery-技术内幕"><a href="#jQuery-技术内幕" class="headerlink" title="jQuery 技术内幕"></a>jQuery 技术内幕</h4><p>喵 jQuery 的源码有种豁然开朗的感觉，特别是理解到一些常用方法是如何实现的时候，让人特别兴奋。我看这本书的过程是，喵书、喵源码、翻译源码注释、再喵书做笔记，这样一个方法一个方法看下来。书还没有啃完，在 Sizzle 那一章卡了一段时间。一开始从上往下看，有一个星期的时间进度不大，慢慢发现问题在于 Sizzle 的实现中涉及很多函数调用和逻辑分支，在搞不清楚每个工具函数的使用之前自然很难理解主函数的调用。于是跳过前面一部分从后面看起，读起来就没那么困难了。在这之后被学校的作业插断了进度，这本书也就暂停了。这几天有时间了会继续捡这本书，期待一下下</p>
<h4 id="深入浅出-NodeJS"><a href="#深入浅出-NodeJS" class="headerlink" title="深入浅出 NodeJS"></a>深入浅出 NodeJS</h4><p>很厉害的一本书。书中详细介绍了 Node 本身的设计思路，甚至从底层展开（这部分我没看懂..）。介绍了有一些模块和问题场景的解决思路，学习到很多。此外，收获还有网络协议在这本书上面恶补回来了一番，缓存机制的实现变得更加清晰，测试途径也了解了一丢丢。很遗憾没有入手这本书，推荐推荐</p>
<h2 id="补漏"><a href="#补漏" class="headerlink" title="补漏"></a>补漏</h2><ul>
<li><p>正则表达式<br>  眼红了很久的正则表达式在看 jQuery 那本书之前终于下决心啃下来了，然后就啃下来了。之前有尝试过但由于实践太少时间一长也就丢了，多尝试的话其实正则表达式也很吸引人的感觉</p>
</li>
<li><p>XSS<br>  之前项目中有遇到 XSS 的问题，当时随手拿了别人的代码，对 XSS 的问题并没有深入了解，随后在交叉面试中由于这部分内容不熟悉被面试官批了一顿.. 于是又补了这一块，还没写成博文，感觉现在也还是半桶水</p>
</li>
<li><p>XMLHttpRequest<br>  一直在使用但一直不熟悉，然后下定决定把这块内容吃了，并在这个基础上封装了代码方便以后使用，好吧其实也就花了一个下午的时间..</p>
</li>
<li><p>PJAX<br>  接触过但没意识到其重要性，补了一些这方面的内容</p>
</li>
</ul>
<h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><p>现在这个博客是捣鼓了一天 hexo 的结果。本来打算自己写代码来处理所有的 md 笔记导出 html，写了一部分完成了资源列表，发现还有分页、增量更新、文章预览等等各种问题要处理，便果断投向 hexo。很方便很强大的一个静态博客系统（编译速度在 3.0 有了成倍的提升，换成我估计会是拖拉机）</p>
<h2 id="校招"><a href="#校招" class="headerlink" title="校招"></a>校招</h2><p>只经历了交叉面试和在线笔试。前者啪啪啪打了我好几下脸，后者把我虐哭在厕所。最深刻的感觉是，竞争很大但不足很多，心态放下来好好学东西咯</p>
<h2 id="动漫"><a href="#动漫" class="headerlink" title="动漫"></a>动漫</h2><p>看书、作业之余补了几部番，有大半年的时间没补过旧番了吧。物语系列一如既往很愉悦，Psycho-Pass 老虚依然大杀特杀。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>每天从学校到出租屋要提防着路上的💩，现在想想还是挺凄凉的；邻居家的小狗每天汪汪汪地叫个不停，经常卖萌但又怕生；每次闯进来一个飞蛾，战争便开始了；吃了烤鸭，以后不想吃了；还有去了很多次的川菜馆和兰州拉面… 完结撒花</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;火车上起得早，还有两个钟的时间回到广州。于是又想着是不是该写点什么，然后想到什么写什么好了。在北京待了两个多月的时间，学了一些东西，但也荒废了许多时间。简单遍历一下，差不多做了这么几件事情&lt;/p&gt;
    
    </summary>
    
    
      <category term="碎屑" scheme="http://cupools.github.io/tags/%E7%A2%8E%E5%B1%91/"/>
    
  </entry>
  
  <entry>
    <title>移动端踩过的坑</title>
    <link href="http://cupools.github.io/2015/091012/"/>
    <id>http://cupools.github.io/2015/091012/</id>
    <published>2015-09-09T16:00:00.000Z</published>
    <updated>2016-08-26T07:57:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>想着自己是不是要写点什么，马上想到了上半年移动端遇到的坑坑洼洼。有这样的小剧场：汪，红米这里有问题；汪汪汪，魅族怎么显示不出来呢；汪汪… (o`･ω･)ﾉ(ﾉД`)</p>
<p>后天就要回广州啦，北京再见_(:з」∠)_</p>
<a id="more"></a>
<h2 id="position-fixed"><a href="#position-fixed" class="headerlink" title="position: fixed"></a>position: fixed</h2><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>移动端的在线客服，聊天室风格，输入框置底，参考手Q，需求方坚持这种聊天风格不肯妥协，考虑 UC 浏览器和 app 内置浏览器，忽略 wp</p>
<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><ol>
<li>ios 中点浏览器顶部显示地址栏，随后呼出软键盘的时候会导致 fixed 元素上移，稳定重现；小米2中呼出软键盘会导致 fixed 在底部的元素位置错乱，具体表现为与软键盘之间存在较大间隙，不稳定重现。华为和魅族表现良好（图片回头补上）</li>
<li>webView 中呼出软键盘，底部输入框被完全遮挡，页面没有向上滑</li>
</ol>
<h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><ol>
<li>有如下几种尝试，无法彻底解决问题<ul>
<li>尝试 flex 布局。ios 中出现顶部 banner 被地址栏覆盖的问题</li>
<li>尝试绝对定位，容器高度由 js 计算。ios 中，在浏览器地址栏显示的情况下，由于页面高度过长，底部输入框需要滚动才能看到，严重影响用户体验。android 地址栏不会自动隐藏，因此不会出现该问题。然而 android 的第三方输入法在输入待选上面一般会有一行工具栏，不稳定出现覆盖底部输入框的问题。</li>
<li>尝试在呼出软键盘之后做绝对定位和相对定位的切换。浏览器无法及时反馈软键盘的状态。ios 可以通过监听 focus 得知是否呼出软键盘；android 中，由于软键盘呼出后可以手动点击隐藏软键盘却不丢失输入框焦点，使用轮询的方式监听 viewport 的高度判断是否呼出软键盘（呼出软键盘，viewpoet 的高度将减小，有一个逐步变化过程）。但由于这种暴力的方式在红米下改变 scrollTop 显示输入框的过程中出现高度错乱，弃用</li>
</ul>
</li>
<li>在简单的例子测试中发现软键盘不会影响到页面的表现，沟通后是 webView 配置的问题，交给客户端的同学解决（写简单的例子做测试很重要啊）</li>
</ol>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>千万不要置底输入框！千万不要置底输入框！千万不要置底输入框！移动 web 中的输入场景大部分使用弹窗，或者切换页面置顶输入框提供输入和单词联想</p>
<h2 id="android-中-webkit-transform-无效"><a href="#android-中-webkit-transform-无效" class="headerlink" title="android 中 (-webkit-)transform 无效"></a>android 中 (-webkit-)transform 无效</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>做 H5 滑动页面经常会有提示滚动下一页的小三角形，使用伪元素和<code>transform</code>实现（包括-webkit-前缀）。发现 android 2.x 和 4.x 下 transform 和 animation 无效</p>
<h3 id="解决思路-1"><a href="#解决思路-1" class="headerlink" title="解决思路"></a>解决思路</h3><p>抛弃伪元素使用标签实现。在 android 2.x 下发现<code>transform:rotate</code>仍然无效，在父元素添加<code>transform: rotate(0)</code>即可</p>
<h2 id="小屏幕兼容"><a href="#小屏幕兼容" class="headerlink" title="小屏幕兼容"></a>小屏幕兼容</h2><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><p>有些暴力的设计师会在单屏的页面或者 dialog 里面塞很多很多东西，可能是表单或者动画元素，导致 iphone 4s 之类的 3.5 寸屏幕压力山大</p>
<h3 id="解决思路-2"><a href="#解决思路-2" class="headerlink" title="解决思路"></a>解决思路</h3><p>添加适当的断点，使用<code>transform: scale</code>或者<code>zoom</code>对容器做缩放比重新设置宽高要方便的多多。前者可通过改变<code>transform-origin</code>修改缩放的支点，后者不支持字体缩放的样子，没具体使用过。如果是 dialog 之类进入页面不会立即显示出来的元素，也可以通过 js 计算得到最适合的缩放比例</p>
<p>可以尝试通过百分比或者 rem 解决类似问题。举个例子，手机 UC 浏览器下载官网，一个页面会有多个动画元素，有时候是多个居中，有时候是垂直多个不重叠。多个元素需要定位到准确的位置，然后加上动画并保持动画的连贯，此时如果用百分比为单位会有比较繁琐的计算</p>
<p><strong>rem 是十分有效的解决方法！！</strong></p>
<h2 id="小米手机绝对定位元素消失"><a href="#小米手机绝对定位元素消失" class="headerlink" title="小米手机绝对定位元素消失"></a>小米手机绝对定位元素消失</h2><h3 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h3><p>小米手机自带浏览器上使用绝对定位的元素没有显示出来，调高 z-index 无果</p>
<h3 id="解决思路-3"><a href="#解决思路-3" class="headerlink" title="解决思路"></a>解决思路</h3><p>添加一个设置<code>opacity: 1</code>的动画即可</p>
<h2 id="UC-浏览器图片降色问题"><a href="#UC-浏览器图片降色问题" class="headerlink" title="UC 浏览器图片降色问题"></a>UC 浏览器图片降色问题</h2><h3 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h3><p>忘了哪一天开始，android 上的 UC 浏览器发现了这个问题，吓坏我和我的小伙伴了。找了内核的同学沟通，是 android 上的 UC 浏览器为了更好地控制内存，对体积比较大的图片做了优化处理，结果跑偏了。问题已反馈，UC 10.x 好像还有这个问题，现在不知道解决了没有</p>
<h3 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h3><p>android 上的 UC 浏览器都会不稳定出现，低端机更为明显。体积比较大的图片（20kb+）不稳定出现这个问题，表现为图片颜色变得偏灰色，透明颜色渐变的区域直接变成一块灰色。png8、 png24 和 jpg 都没法避免</p>
<h3 id="解决思路-4"><a href="#解决思路-4" class="headerlink" title="解决思路"></a>解决思路</h3><p>完全透明不会受影响。将图片导出为交错可解决小部分问题。最优是将大图拆分为小图拼接</p>
<h2 id="IOS-音频缓存问题"><a href="#IOS-音频缓存问题" class="headerlink" title="IOS 音频缓存问题"></a>IOS 音频缓存问题</h2><h3 id="场景-2"><a href="#场景-2" class="headerlink" title="场景"></a>场景</h3><p>UC 浏览器中点击按钮通过创建 audio 标签加载音频并播放，调起浏览器分享接口分享到微信后回到 UC 发现已缓存的音频无法播放</p>
<h3 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h3><p>ios 中切换应用程序会导致浏览器中已缓存的音频无法播放，稳定重现</p>
<h3 id="解决思路-5"><a href="#解决思路-5" class="headerlink" title="解决思路"></a>解决思路</h3><p>在调用分享接口后添加时间戳重新加载已缓存的音频文件</p>
<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p><a href="http://people.apache.org/~pmuellr/weinre-docs/latest/" target="_blank" rel="external">weinre</a> 居家旅行调试必备</p>
<h2 id="vuejs-0-10-动画卡顿"><a href="#vuejs-0-10-动画卡顿" class="headerlink" title="vuejs 0.10 动画卡顿"></a>vuejs 0.10 动画卡顿</h2><h3 id="场景-3"><a href="#场景-3" class="headerlink" title="场景"></a>场景</h3><p>多个页面通过<code>v-if</code>和入场动画控制切换，每个页面有两到三个动画，切换多个页面后发现 android 中动画卡顿严重</p>
<h3 id="问题描述-6"><a href="#问题描述-6" class="headerlink" title="问题描述"></a>问题描述</h3><p>通过 weinre 查看切换多个页面后文档中的节点，发现不满足<code>v-if</code>的节点并没有被移除，而只是简单隐藏，与 chrome 中的表现不符。切换多个页面后，有多个动画同时运行导致了严重的卡顿</p>
<h3 id="解决思路-6"><a href="#解决思路-6" class="headerlink" title="解决思路"></a>解决思路</h3><p>添加一个<code>class=&quot;playing&quot;</code>的标记，限制多个页面的动画同时运行</p>
<h2 id="canvas-绘制图片模糊"><a href="#canvas-绘制图片模糊" class="headerlink" title="canvas 绘制图片模糊"></a>canvas 绘制图片模糊</h2><h3 id="问题描述-7"><a href="#问题描述-7" class="headerlink" title="问题描述"></a>问题描述</h3><p>发现移动端将图片插入 canvas 容器后，图片变得模糊。原因是图片插入 canvas 不再是 @2x</p>
<h3 id="解决思路-7"><a href="#解决思路-7" class="headerlink" title="解决思路"></a>解决思路</h3><p>将两倍大小的图片插进去 canvas 容器，再对容器进行缩放。可通过 <a href="https://github.com/jondavidjohn/hidpi-canvas-polyfill" target="_blank" rel="external">hidpi-canvas.js</a> 帮忙</p>
<h2 id="onkeyup"><a href="#onkeyup" class="headerlink" title="onkeyup"></a>onkeyup</h2><h3 id="问题描述-8"><a href="#问题描述-8" class="headerlink" title="问题描述"></a>问题描述</h3><p>ios 中监听输入，使用 onkeyup，发现有几个手机没法触发事件，我的 5s 没问题，别人的 5s 就不行了</p>
<h3 id="解决思路-8"><a href="#解决思路-8" class="headerlink" title="解决思路"></a>解决思路</h3><p>ios8 支持第三方键盘。ios 自带输入法的输入能触发 onkeyup，其他就不行了。改用 oninput 实现。wp 使用 onpropertychange 实现</p>
<h2 id="border-扁角"><a href="#border-扁角" class="headerlink" title="border 扁角"></a>border 扁角</h2><h3 id="问题描述-9"><a href="#问题描述-9" class="headerlink" title="问题描述"></a>问题描述</h3><p>使用 border 画扁扁的三角形，在宽度大大于高度的情况下会出现锯齿的情况。chrome pc 比较明显，手机看着也有点不舒服</p>
<h3 id="解决思路-9"><a href="#解决思路-9" class="headerlink" title="解决思路"></a>解决思路</h3><p>改用<code>transform: rotate</code>和<code>overflow: hidden</code>实现</p>
<h2 id="border-radius-和-overflow-hidden"><a href="#border-radius-和-overflow-hidden" class="headerlink" title="border-radius 和 overflow: hidden"></a>border-radius 和 overflow: hidden</h2><h3 id="问题描述-10"><a href="#问题描述-10" class="headerlink" title="问题描述"></a>问题描述</h3><p>高度固定的容器A里面有一个高度固定的列表B，将列表B设置为<code>overflow: auto</code>。容器A为<code>overflow:hidden;</code>，如果容器A有一个<code>border-radius:5px</code>，可见到列表B会溢出</p>
<h3 id="解决思路-10"><a href="#解决思路-10" class="headerlink" title="解决思路"></a>解决思路</h3><p>使用贴图做圆角（一下子回到解放前。。）</p>
<h2 id="动画闪烁"><a href="#动画闪烁" class="headerlink" title="动画闪烁"></a>动画闪烁</h2><h3 id="问题描述-11"><a href="#问题描述-11" class="headerlink" title="问题描述"></a>问题描述</h3><p>使用<code>transition: height .5s</code>实现下拉菜单，在 ios 出现闪烁现象</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>添加<code>-webkit-backface-visibility: hidden;</code>。建议避免修改<code>height</code>、 <code>margin</code>等会引起页面重排的样式，<code>opacity</code>和<code>transform</code>实现的动画在移动端上表现更好</p>
<h2 id="推荐的工具"><a href="#推荐的工具" class="headerlink" title="推荐的工具"></a>推荐的工具</h2><ol>
<li><p><a href="http://people.apache.org/~pmuellr/weinre-docs/latest/" target="_blank" rel="external">Weinre</a><br> 允许在 PC 通过控制台调试移动端页面。很方便部署，也可以配合 grunt 使用</p>
</li>
<li><p>Charles<br> Mac 下的抓包工具，在一些场景下抓包工具能提供很大的帮助，比如确认手机页面发出的请求参数是否正确，统计请求等。window 用 Fiddler 然后 mac 用 Charles 都能玩的很愉快</p>
</li>
<li><p><a href="https://chrome.google.com/webstore/detail/uc-qr-code/nhelohnehpahakjoklmodmogclacjgdj?hl=zh-CN" target="_blank" rel="external">UC Qr Code</a><br> Chrome 的二维码插件，简单却又方便到没朋友</p>
</li>
</ol>
<h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p>如果发现有写不对的地方可以邮件联系_(:з」∠)_</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想着自己是不是要写点什么，马上想到了上半年移动端遇到的坑坑洼洼。有这样的小剧场：汪，红米这里有问题；汪汪汪，魅族怎么显示不出来呢；汪汪… (o`･ω･)ﾉ(ﾉД`)&lt;/p&gt;
&lt;p&gt;后天就要回广州啦，北京再见_(:з」∠)_&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://cupools.github.io/tags/JavaScript/"/>
    
      <category term="css" scheme="http://cupools.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>关于 CSRF</title>
    <link href="http://cupools.github.io/2015/090111/"/>
    <id>http://cupools.github.io/2015/090111/</id>
    <published>2015-08-31T16:00:00.000Z</published>
    <updated>2016-08-26T07:58:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前在《编写高质量代码》中第一次看到 CSRF 这个东西，没能理解。最近刚好喵了 Session 和 Cookie 相关，又在查阅 XSS 的过程中看到 CSRF，于是简单整理一下</p>
<a id="more"></a>
<h2 id="关于-CSRF"><a href="#关于-CSRF" class="headerlink" title="关于 CSRF"></a>关于 CSRF</h2><p>CSRF（Cross-site request forgery），即跨站请求伪造，也被称为 One Click Attack 或者 Session Riding。与 XSS 不同，XSS利用站点内的信任用户，而CSRF则通过伪装来自受信任用户的请求，在受信任的网站做危险的事情</p>
<h2 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h2><p><img src="/images/csrf-09-01.png" alt="CSRF 示意"></p>
<p>看图片应该很好理解了。要完成一次CSRF攻击，用户必须依次完成两个步骤</p>
<ol>
<li>登录受信任网站 A，并在本地生成 Cookie</li>
<li>在不登出 A 的情况下，访问危险网站 B</li>
</ol>
<p>B 有可能是一个纯粹的恶意网站，也有可能是受信任网站遭受 XSS 攻击。当 B 向 A 发送请求时，如果没有登出 A 站点，那么 B 发出的请求将携带 A 储存在浏览器的 cookie，被 A 当做信任的请求处理，由此产生极大的风险</p>
<h2 id="防范方法"><a href="#防范方法" class="headerlink" title="防范方法"></a>防范方法</h2><p>最简单有效的防范方法是在提交表单时增加一个伪随机数，提交之后服务器验证所提交的随机数是否与服务器保存的一致即可</p>
<p>然而这会带来一个问题是用户如果同时打开两个页面提交表单，比较慢打开的表单页面产生的伪随机数会覆盖之前产生的伪随机数，使先打开的表单页面无法提交。解决方法是为不同表单生成不同的伪随机数，这里就不展开了</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html" target="_blank" rel="external">浅谈 CSRF 攻击方式</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在《编写高质量代码》中第一次看到 CSRF 这个东西，没能理解。最近刚好喵了 Session 和 Cookie 相关，又在查阅 XSS 的过程中看到 CSRF，于是简单整理一下&lt;/p&gt;
    
    </summary>
    
    
      <category term="安全" scheme="http://cupools.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>XMLHttpRequest 整理</title>
    <link href="http://cupools.github.io/2015/090116/"/>
    <id>http://cupools.github.io/2015/090116/</id>
    <published>2015-08-31T16:00:00.000Z</published>
    <updated>2016-08-26T07:58:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>有空便整理了一下 xhr 的内容，内容基本上来自 W3C。同时对其进行了简单封装，方便以后使用。</p>
<a id="more"></a>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>XMLHttpRequest 对象提供了对 HTTP 协议的完全的访问，包括做出 POST 和 HEAD 请求以及普通的 GET 请求的能力。可以同步或异步地返回 Web 服务器的响应，并且能够以文本或者一个 DOM 文档的形式返回内容</p>
<p>XMLHttpRequest 得到了所有现代浏览器较好的支持。唯一的浏览器依赖性涉及 XMLHttpRequest 对象的创建。在 IE 5 和 IE 6 中，必须使用特定于 IE 的 ActiveXObject() 构造函数</p>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="readyState"><a href="#readyState" class="headerlink" title="readyState"></a>readyState</h3><table>
<thead>
<tr>
<th>状态</th>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>Uninitialized</td>
<td>初始化状态。XMLHttpRequest 对象已创建或已被 abort() 方法重置</td>
</tr>
<tr>
<td>1</td>
<td>Open</td>
<td>open() 方法已调用，但是 send() 方法未调用。请求还没有被发送</td>
</tr>
<tr>
<td>2</td>
<td>Sent</td>
<td>Send() 方法已调用，HTTP 请求已发送到 Web 服务器。未接收到响应</td>
</tr>
<tr>
<td>3</td>
<td>Receiving</td>
<td>所有响应头部都已经接收到。响应体开始接收但未完成</td>
</tr>
<tr>
<td>4</td>
<td>Loaded</td>
<td>HTTP 响应已经完全接收</td>
</tr>
</tbody>
</table>
<h3 id="responseText"><a href="#responseText" class="headerlink" title="responseText"></a>responseText</h3><p>目前为止为服务器接收到的<strong>响应体</strong>（不包括头部），或者如果还没有接收到数据的话，就是空字符串。当 readyState 为 3，这个属性返回目前已经接收的响应部分。如果 readyState 为 4，这个属性保存了完整的响应体。</p>
<p>如果响应包含了为响应体指定字符编码的头部，就使用该编码。否则，假定使用 Unicode UTF-8</p>
<h3 id="responseXML"><a href="#responseXML" class="headerlink" title="responseXML"></a>responseXML</h3><p>对请求的响应，解析为 XML 并作为 Document 对象返回</p>
<h3 id="status"><a href="#status" class="headerlink" title="status"></a>status</h3><p>由服务器返回的 HTTP 状态代码。当 readyState 小于 3 的时候读取这一属性会导致一个异常</p>
<h3 id="statusText"><a href="#statusText" class="headerlink" title="statusText"></a>statusText</h3><p>这个属性用名称而不是数字指定了请求的 HTTP 的状态代码。也就是说，当状态为 200 的时候它是 “OK”，当状态为 404 的时候它是 “Not Found”。和 status 属性一样，当 readyState 小于 3 的时候读取这一属性会导致一个异常</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="abort"><a href="#abort" class="headerlink" title="abort()"></a>abort()</h3><p>取消当前响应，关闭连接并且结束任何未决的网络活动</p>
<p>这个方法把 XMLHttpRequest 对象重置为 readyState 为 0 的状态，并且取消所有未决的网络活动。例如，如果请求用了太长时间，而且响应不再必要的时候，可以调用这个方法</p>
<h3 id="getAllResponseHeaders"><a href="#getAllResponseHeaders" class="headerlink" title="getAllResponseHeaders()"></a>getAllResponseHeaders()</h3><p>把 HTTP 响应头部作为未解析的字符串返回。<br>如果 readyState 小于 3，这个方法返回 null。否则，它返回服务器发送的所有 HTTP 响应的头部。头部作为单个的字符串返回，一行一个头部。每行用换行符 “\r\n” 隔开</p>
<h3 id="getResponseHeader"><a href="#getResponseHeader" class="headerlink" title="getResponseHeader()"></a>getResponseHeader()</h3><p>返回指定的 HTTP 响应头部的值。其参数是要返回的 HTTP 响应头部的名称。可以使用任何大小写来制定这个头部名字，和响应头部的比较是不区分大小写的</p>
<p>该方法的返回值是指定的 HTTP 响应头部的值，如果没有接收到这个头部或者 readyState 小于 3 则为空字符串。如果接收到多个有指定名称的头部，这个头部的值被连接起来并返回，使用逗号和空格分隔开各个头部的值</p>
<h3 id="open"><a href="#open" class="headerlink" title="open()"></a>open()</h3><p>初始化 HTTP 请求参数，例如 URL 和 HTTP 方法，但是并不发送请求</p>
<h3 id="send"><a href="#send" class="headerlink" title="send()"></a>send()</h3><p>发送 HTTP 请求，使用传递给 open() 方法的参数，以及传递给该方法的可选请求体</p>
<h3 id="setRequestHeader"><a href="#setRequestHeader" class="headerlink" title="setRequestHeader()"></a>setRequestHeader()</h3><p>向一个打开但未发送的请求设置或添加一个 HTTP 请求</p>
<h2 id="简单代码"><a href="#简单代码" class="headerlink" title="简单代码"></a>简单代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadXMLDoc</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">    xhr = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</div><div class="line">        xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123;</div><div class="line">        xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (xhr != <span class="literal">null</span>) &#123;</div><div class="line">        xhr.onreadystatechange = stateChange;</div><div class="line">        xhr.open(<span class="string">"GET"</span>, url, <span class="literal">true</span>);</div><div class="line">        xhr.send(<span class="literal">null</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        alert(<span class="string">"Your browser does not support XMLHTTP."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">stateChange</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123; <span class="comment">// 4 = "loaded"</span></div><div class="line">        <span class="keyword">if</span> (xhr.status == <span class="number">200</span>) &#123; <span class="comment">// 200 = OK</span></div><div class="line">            <span class="comment">// ...our code here...</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            alert(<span class="string">"Problem retrieving XML data"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="简单封装"><a href="#简单封装" class="headerlink" title="简单封装"></a>简单封装</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * EasyAjax</div><div class="line"> * 简单封装 xhr 对象</div><div class="line"> * 提供 get，post 方法</div><div class="line"> *  ajax.get(url, params, success, error);</div><div class="line"> */</div><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">w</span>) </span>&#123;</div><div class="line"><span class="meta">	'use strict'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> uid = <span class="number">0</span>,</div><div class="line">        cache = &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">EasyAjax</span>(<span class="params">opt</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.url = opt.url;</div><div class="line">        <span class="keyword">this</span>.method = opt.method || <span class="string">'GET'</span>;</div><div class="line">        <span class="keyword">this</span>.data = opt.data || <span class="string">''</span>;</div><div class="line">        <span class="keyword">this</span>.onsuccess = <span class="keyword">typeof</span> opt.onsuccess === <span class="string">'function'</span> ? opt.onsuccess : <span class="literal">null</span>;</div><div class="line">        <span class="keyword">this</span>.onerror = <span class="keyword">typeof</span> opt.onerror === <span class="string">'function'</span> ? opt.onerror : <span class="literal">null</span>;</div><div class="line">        <span class="keyword">this</span>.async = <span class="keyword">typeof</span> opt.async !== <span class="string">'undefined'</span> ? !!opt.async : <span class="literal">true</span>;</div><div class="line">        <span class="keyword">this</span>.timeout = opt.timeout || <span class="number">0</span>;</div><div class="line">        <span class="keyword">this</span>.xhr = <span class="literal">null</span>;</div><div class="line">        <span class="keyword">this</span>._ajax();</div><div class="line">        <span class="keyword">this</span>.uid = <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    EasyAjax.prototype = &#123;</div><div class="line">        <span class="keyword">constructor</span>: EasyAjax,</div><div class="line">        _ajax: function() &#123;</div><div class="line">            <span class="keyword">var</span> xhr = <span class="keyword">this</span>.xhr = <span class="keyword">this</span>._getXHR(),</div><div class="line">                that = <span class="keyword">this</span>,</div><div class="line">                data = <span class="literal">null</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (xhr) &#123;</div><div class="line">                xhr.timeout = <span class="keyword">this</span>.timeout;</div><div class="line"></div><div class="line">                xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    that._onreadystatuschange.call(that);</div><div class="line">                &#125;;</div><div class="line">                xhr.ontimeout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    that._ontimeout.call(that);</div><div class="line">                &#125;;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.method === <span class="string">'POST'</span>) &#123;</div><div class="line">                    xhr.open(<span class="keyword">this</span>.method, <span class="keyword">this</span>.url, <span class="keyword">this</span>.async);</div><div class="line">                    xhr.setRequestHeader(<span class="string">'Content-type'</span>, <span class="string">'application/x-www-form-urlencoded;'</span>);</div><div class="line">                    data = json2params(<span class="keyword">this</span>.data);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    xhr.open(<span class="keyword">this</span>.method, parseURL(<span class="keyword">this</span>.url, <span class="keyword">this</span>.data), <span class="keyword">this</span>.async);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                xhr.send(data);</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        _getXHR: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> xhr = <span class="literal">null</span>;</div><div class="line">            <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</div><div class="line">                xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123;</div><div class="line">                xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> xhr;</div><div class="line">        &#125;,</div><div class="line">        _onreadystatuschange: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> xhr = <span class="keyword">this</span>.xhr;</div><div class="line">            <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) &#123;</div><div class="line">                    <span class="keyword">this</span>.onsuccess &amp;&amp; <span class="keyword">this</span>.onsuccess(xhr.responseText, xhr.statusText);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">this</span>.onerror &amp;&amp; <span class="keyword">this</span>.onerror(xhr.responseText, xhr.statusText);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">this</span>._destory();</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        _ontimeout: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.error(<span class="string">'ajax timeout: '</span> + <span class="keyword">this</span>.timeout);</div><div class="line">            <span class="comment">// TODO</span></div><div class="line">        &#125;,</div><div class="line">        _destory: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            cache[<span class="keyword">this</span>.uid] = <span class="literal">null</span>;</div><div class="line">        &#125;,</div><div class="line">        abort: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.xhr.abort();</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parseURL</span>(<span class="params">url, json</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> params = json2params(json);</div><div class="line">        <span class="keyword">return</span> params.length &gt; <span class="number">0</span> ? (url + (url.indexOf(<span class="string">'?'</span>) &gt; <span class="number">-1</span> ? <span class="string">'&amp;'</span> : <span class="string">'?'</span>) + json2params(json)) : url;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">json2params</span>(<span class="params">json</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> json === <span class="string">'string'</span>) &#123;</div><div class="line">            <span class="keyword">return</span> json;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> str = <span class="string">''</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> json) &#123;</div><div class="line">            <span class="keyword">if</span> (json.hasOwnProperty(i) &amp;&amp; json[i] != <span class="literal">null</span>) &#123;</div><div class="line">                str += i + <span class="string">'='</span> + json[i] + <span class="string">'&amp;'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (str.lastIndexOf(<span class="string">'&amp;'</span>) &gt; <span class="number">-1</span>) &#123;</div><div class="line">            str = str.slice(<span class="number">0</span>, <span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> str;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> obj = &#123;&#125;,</div><div class="line">            method = [<span class="string">'get'</span>, <span class="string">'post'</span>];</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; method.length; i++) &#123;</div><div class="line">            obj[method[i]] = factory(method[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> obj;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">factory</span>(<span class="params">m</span>) </span>&#123;</div><div class="line">        m = m.toUpperCase();</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">url, data, onsuccess, onerror</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> ajax = <span class="literal">null</span>;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> url === <span class="string">'string'</span>) &#123;</div><div class="line">                ajax = <span class="keyword">new</span> EasyAjax(&#123;</div><div class="line">                    url: url,</div><div class="line">                    data: data,</div><div class="line">                    method: m,</div><div class="line">                    onsuccess: onsuccess,</div><div class="line">                    onerror: onerror</div><div class="line">                &#125;);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> url === <span class="string">'object'</span>) &#123;</div><div class="line">                url.method = m;</div><div class="line">                ajax = <span class="keyword">new</span> EasyAjax(url);</div><div class="line">            &#125;</div><div class="line">            ajax.uid = uid++;</div><div class="line">            cache[ajax.uid] = ajax;</div><div class="line">            <span class="keyword">return</span> ajax;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    w.ajax = init();</div><div class="line"></div><div class="line">&#125;)(<span class="built_in">window</span>);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 示例</span></div><div class="line">ajax.get(<span class="string">'http://uc.cn'</span>, &#123;</div><div class="line">    a:<span class="number">1</span>,</div><div class="line">    b:<span class="number">2</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">data, status</span>) </span>&#123;</div><div class="line">    render(<span class="built_in">JSON</span>.parse(data));</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">data, status</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.error(status);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>对 xhr 做了简单的封装，只提供了 .get() 和 .post() 方法。兼容性方面手上没有 IE 浏览器所以暂时没做测试，功能上可能会遇到什么问题慢慢再补充上去吧（比如超时控制什么的）。看上去好像会出现内存泄露的问题_(:з」∠)_</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.w3school.com.cn/xmldom/dom_httprequest.asp" target="_blank" rel="external">W3C</a></p>
<p><a href="http://segmentfault.com/a/1190000002782175" target="_blank" rel="external">XHR 对象</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有空便整理了一下 xhr 的内容，内容基本上来自 W3C。同时对其进行了简单封装，方便以后使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://cupools.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
